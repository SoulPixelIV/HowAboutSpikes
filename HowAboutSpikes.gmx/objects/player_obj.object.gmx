<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>player_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.movSpeed = 3.45;
global.jumpStrength = 6.24;
global.numberJumps = 2;
global.gravityStrength = 0.23;
global.ladderSpeed = 3.25;

global.holding = noone;
global.numberJumpsSave = global.numberJumps;
global.horSpeed = 0;
global.verSpeed = 0;
global.checkpointX = 0;
global.checkpointY = 0;
global.checkpointRoom = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//###Movement###
x = x + global.horSpeed;
y = y + global.verSpeed;

key_left = keyboard_check(ord('A'));
key_right = keyboard_check(ord('D'));
key_jump = keyboard_check_pressed(vk_space);
key_attack = keyboard_check_pressed(vk_shift);

var move = key_right - key_left;   

global.horSpeed = move * global.movSpeed;

//###Gravity###
global.verSpeed = global.verSpeed + global.gravityStrength;

if (!place_free(x, y + 1) &amp;&amp; (key_jump)) || (key_jump) &amp;&amp; (global.numberJumps &gt; 0)
{
    global.verSpeed = -global.jumpStrength;
    global.numberJumps = global.numberJumps - 1;
}

//###Combat###
if (key_attack)
{
    if (sign(move) == 1)
    {
        instance_create(x + 32, y, hitbox_obj);
    }
    if (sign(move) == -1)
    {
        instance_create(x - 32, y, hitbox_obj);
    }
    else
    {
        instance_create(x + 32, y, hitbox_obj);
    }
}

//###Collision Checking###
if (!place_free(x + global.horSpeed, y))
{
    while (place_free(x + sign(global.horSpeed), y))
    {
        x = x + sign(global.horSpeed);
    }
    global.horSpeed = 0;
}
if (!place_free(x, y + global.verSpeed))
{
    while (place_free(x, y + sign(global.verSpeed)))
    {
        y = y + sign(global.verSpeed);
    }
    global.verSpeed = 0;
    global.numberJumps = global.numberJumpsSave;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//###Checkpoint Collision###
if (place_meeting(x, y, checkpoint_obj))
{
    global.checkpointX = other.x;
    global.checkpointY = other.y;
    global.checkpointRoom = room;
    other.image_index = 1;
}
//###Spike Collision###
if (place_meeting(x, y, spike_obj))
{
    if (global.checkpointRoom == noone)
    {
        room_restart();
    }
    else
    {
        x = global.checkpointX;
        y = global.checkpointY;
        global.verSpeed = 0;
        global.horSpeed = 0;
    }
}
//###Finish Collision###
if (place_meeting(x, y, roomColliderRight_obj))
{
    room_goto_next();
}
if (place_meeting(x, y, roomColliderLeft_obj))
{
    room_goto_previous();
}
//###Ladder Collision###
if (place_meeting(x, y, ladder_obj) &amp;&amp; keyboard_check(ord('W')))
{
    //###Collision Checking###
    if (!place_free(x + global.horSpeed, y))
    {
        while (place_free(x + sign(global.horSpeed), y))
        {
            x = x + sign(global.horSpeed);
        }
        global.horSpeed = 0;
    }
    else
    {
        global.verSpeed = -global.ladderSpeed;
    }
    if (!place_free(x, y + global.verSpeed))
    {
        while (place_free(x, y + sign(global.verSpeed)))
        {
            y = y + sign(global.verSpeed);
        }
        global.verSpeed = 0;
    }
    else
    {
        global.verSpeed = -global.ladderSpeed;
    }
}
//###Lever Collision###
if (place_meeting(x, y, lever_obj))
{
    instance_destroy(triggerBlock_obj);
}
//###Key Collision###
if (place_meeting(x, y, key_obj))
{
    global.holding = other.id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
guiPosX = view_xview[0];
guiPosY = view_yview[0];
draw_set_font(gui_fnt);
draw_text(guiPosX + 8, guiPosY, "Jumps = " + string(global.numberJumps));
draw_text(guiPosX + 8, guiPosY + 16, "VSpeed = " + string(global.verSpeed));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
