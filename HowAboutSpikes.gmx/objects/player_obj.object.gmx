<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>playerIdle_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>health = 2;
money = 0;
movement = true;
global.movSpeed = 2.65;
global.jumpStrength = 7.04;
global.numberJumps = 2;
global.gravityStrength = 0.46;
global.ladderSpeed = 3.25;
global.state = 0;

global.holding = noone;
global.numberJumpsSave = global.numberJumps;
horSpeed = 0;
verSpeed = 0;
global.checkpointX = 0;
global.checkpointY = 0;
global.checkpointRoom = 0;
noDamage = false;
nearEnemy = false;
lastDir = 0;
landing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>landing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>noDamage = false;
gamepad_set_vibration(0, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//###Movement###
x = x + horSpeed;
y = y + verSpeed;

key_left = keyboard_check(ord('A')) || gamepad_axis_value(0, gp_axislh) &lt; 0;
key_right = keyboard_check(ord('D')) || gamepad_axis_value(0, gp_axislh) &gt; 0;
key_jump = keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(0, gp_face1);
key_jump_release = keyboard_check_released(vk_space) || gamepad_button_check_released(0, gp_face1);
key_attack = keyboard_check_pressed(ord('F')) || gamepad_button_check_pressed(0, gp_shoulderr);
gamepad_set_axis_deadzone(0, 0.55);
var move = key_right - key_left;

horSpeed = move * global.movSpeed;

//###Animation###
if (key_right)
{
    lastDir = 0;
    sprite_index = playerWalk_spr;
    image_xscale = 1;
}
if (key_left)
{
    lastDir = 1;
    sprite_index = playerWalk_spr;
    image_xscale = -1;
}

if (horSpeed == 0)
{
    if (lastDir == 0)
    {
        sprite_index = playerIdle_spr;
        image_xscale = 1;
    }
    else
    {
        sprite_index = playerIdle_spr;
        image_xscale = -1;
    }
}

if (verSpeed &gt; 0)
{
    sprite_index = playerFalling_spr;
    if (lastDir == 0)
    {
        image_xscale = 1;
    }
    else
    {
        image_xscale = -1;
    }
}

if (landing == true)
{
    sprite_index = playerLanding_spr;
    if (lastDir == 0)
    {
        image_xscale = 1;
    }
    else
    {
        image_xscale = -1;
    }
}
    
//###Gravity###
if (verSpeed &lt; 14)
{
    verSpeed = verSpeed + global.gravityStrength;
}

if (!place_free(x, y + 1) &amp;&amp; (key_jump)) || (key_jump) &amp;&amp; (global.numberJumps &gt; 0)
{
    verSpeed = -global.jumpStrength;
    global.numberJumps = global.numberJumps - 1;
}

if (key_jump_release)
{
    if (verSpeed &lt; 0)
    {
        verSpeed = verSpeed / 2;
    }
}

//###Combat###
if ((verSpeed &lt; 0) &amp;&amp; (distance_to_object(enemy_obj) &lt; 128))
{
    nearEnemy = true;
    if (key_attack)
    {
        global.state = 1;
    }
}
else
{
    nearEnemy = false;
}

switch (global.state)
{
case 1:
    targetInst = instance_nearest(x, y, enemy_obj);
    targetX = targetInst.x;
    targetY = targetInst.y;
    global.state = 2;
    break;
    
case 2:
    if (distance_to_point(targetX, targetY) &lt; 32)
    {
        global.state = 3;
    }
    else
    {
        move_towards_point(targetX, targetY, 7.4);
        instance_create(x, y, hitbox_obj);
    }
    break;

case 3:
    speed = 0;
    verSpeed = 0;
    horSpeed = 0;
    global.state = 4;
    break;
    
case 4:
    verSpeed = -4;
    global.state = 0;
    break;
}

//###Collision Checking###
if (!place_free(x + horSpeed, y))
{
    while (place_free(x + sign(horSpeed), y))
    {
        x = x + sign(horSpeed);
    }
    horSpeed = 0;
}
if (!place_free(x, y + verSpeed))
{
    while (place_free(x, y + sign(verSpeed)))
    {
        y = y + sign(verSpeed);
    }
    if (verSpeed &gt;= 13)
    {
        gamepad_set_vibration(0, 0.4, 0.4);
        alarm[0] = 10;
    }
    if (verSpeed &gt;= 2)
    {
        landing = true;
        alarm[1] = 14;
    }
    verSpeed = 0;
    global.numberJumps = global.numberJumpsSave;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//###Checkpoint Collision###
if (place_meeting(x, y, checkpoint_obj) || (place_meeting(x, y, checkpointMystery_obj)))
{
    global.checkpointX = other.x;
    global.checkpointY = other.y;
    global.checkpointRoom = room;
    other.image_index = 1;
}
//###Damage Collision###
if (place_meeting(x, y, spike_obj) || (place_meeting(x, y, hitboxEnemy_obj)) || place_meeting(x, y, spikeMystery_obj))
{
    gamepad_set_vibration(0, 0.3, 0.3);
    if (verSpeed &gt; 0)
    {
        verSpeed = -7;
    }
    else
    {
        verSpeed = 7;
    }
    //###Collision Checking###
    if (!place_free(x + horSpeed, y))
    {
        while (place_free(x + sign(horSpeed), y))
        {
            x = x + sign(horSpeed);
        }
        horSpeed = 0;
    }
    else
    {
        verSpeed = -global.ladderSpeed;
    }
    if (!place_free(x, y + verSpeed))
    {
        while (place_free(x, y + sign(verSpeed)))
        {
            y = y + sign(verSpeed);
        }
        verSpeed = 0;
    }
    else
    {
        verSpeed = -global.ladderSpeed;
        global.numberJumps = global.numberJumpsSave;
    }
    horSpeed = 5 * sign(horSpeed);
    if (noDamage == false)
    {
        health = health - 1;
    }
    noDamage = true;
    alarm[0] = 10;
    if (health &lt;= 0)
    {
        if (global.checkpointX == 0)
        {
            x = spawn_obj.x;
            y = spawn_obj.y - 8;
        }
        else
        {
            x = global.checkpointX;
            y = global.checkpointY;
            verSpeed = 0;
            horSpeed = 0;
        }
        health = 2;
    }
}
//###Ladder Collision###
key_jump = keyboard_check(vk_space) || gamepad_button_check(0, gp_face1);
if (place_meeting(x, y, ladder_obj) &amp;&amp; (key_jump))
{
    //###Collision Checking###
    if (!place_free(x + horSpeed, y))
    {
        while (place_free(x + sign(horSpeed), y))
        {
            x = x + sign(horSpeed);
        }
        horSpeed = 0;
    }
    else
    {
        verSpeed = -global.ladderSpeed;
    }
    if (!place_free(x, y + verSpeed))
    {
        while (place_free(x, y + sign(verSpeed)))
        {
            y = y + sign(verSpeed);
        }
        verSpeed = 0;
    }
    else
    {
        verSpeed = -global.ladderSpeed;
        global.numberJumps = global.numberJumpsSave;
    }
}
//###Lever Collision###
if (place_meeting(x, y, lever_obj))
{
    instance_destroy(triggerBlock_obj);
}
//###Key Collision###
if (place_meeting(x, y, key_obj))
{
    global.holding = other.id;
}
//###Checkpoint Collision###
if (place_meeting(x, y, checkpoint_obj))
{
    health = 2;
}
//###Quicksand Collision###
if (place_meeting(x, y, quicksandBlock_obj))
{
    horSpeed = horSpeed / 1.75;
    verSpeed = verSpeed / 1.15;
}
//###Money Collision###
if (place_meeting(x, y, darkSpirit_obj))
{
    money = money + 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
guiPosX = view_xview[0];
guiPosY = view_yview[0];
draw_set_font(gui_fnt);

//###Health###
if (health == 2)
{
    draw_sprite(heart_spr, 0, guiPosX + 36, guiPosY + 36);
}
if (health == 1)
{
    draw_sprite(heart_spr, 1, guiPosX + 36, guiPosY + 36);
}
if (health == 0)
{
    draw_sprite(heart_spr, 2, guiPosX + 36, guiPosY + 36);
}

//###Money###
draw_sprite(darkSpiritIcon_spr, 0, guiPosX + 522, guiPosY + 324);

draw_text(guiPosX + 552, guiPosY + 324, string(money));

//###GUI###
draw_text(guiPosX + 8, guiPosY + 272, "Jumps = " + string(global.numberJumps));
draw_text(guiPosX + 8, guiPosY + 288, "VSpeed = " + string(verSpeed));
draw_text(guiPosX + 8, guiPosY + 304, "FPS = " + string(fps_real));
draw_text(guiPosX + 8, guiPosY + 320, "State = " + string(global.state));
draw_text(guiPosX + 8, guiPosY + 336, "playerSpawnLocation = " + string(global.playerSpawnLocation));
//draw_text(guiPosX + 8, guiPosY + 80, "'R' to Restart Room!");

//###Combat###
if (nearEnemy == true)
{
    draw_text(player_obj.x - 19, player_obj.y - 30, "F");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
