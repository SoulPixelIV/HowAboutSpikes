<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>playerIdle_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vars

//##Public Vars##
movSpeed = 2.65;
gravityStrength = 0.46;

jumpStrength = 7.04;
jumpCount = 2;

dashSpeed = 5.95;
dashLength = 7;

scytheSpeed = 6.2;

attackDelay = 7;

health = global.healthVar;

//##Private Vars##
dash = false;
throw = false;
attack = false;
pause = false;
lastDir = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement Script

//##Key Bindings##
key_left = keyboard_check(ord('A')) || gamepad_axis_value(0, gp_axislh) &lt; 0;
key_right = keyboard_check(ord('D')) || gamepad_axis_value(0, gp_axislh) &gt; 0;
key_jump = keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(0, gp_face1);
key_jump_release = keyboard_check_released(vk_space) || gamepad_button_check_released(0, gp_face1);
key_attack = keyboard_check_pressed(ord('K')) || gamepad_button_check_pressed(0, gp_shoulderr);
key_throw = keyboard_check(ord('J')) || gamepad_button_check(0, gp_shoulderl);
key_pause = keyboard_check_pressed(vk_escape) || gamepad_button_check_pressed(0, gp_start);

//##Controller Settings##
gamepad_set_axis_deadzone(0, 0.55);

//##Position##
x = x + hspeed;
y = y + vspeed;

var move = key_right - key_left;
hspeed = move * movSpeed;

//##Gravity##
vspeed += gravityStrength;

//##Jump##
if ((!place_free(x, y) &amp;&amp; key_jump) || (jumpCount &gt; 0 &amp;&amp; key_jump))
{
    vspeed = jumpStrength;
    jumpCount -= 1;
}
if (key_jump_release &amp;&amp; vspeed &lt; 0)
{
    vspeed = vspeed / 2;
}

//##Dash##
if (key_throw &amp;&amp; vspeed &gt; 0 &amp;&amp; !dash)
{
    if (!instance_exists(dashEffect_obj))
    {
        instance_create(x, y, dashEffect_obj);
    }
    var movSpeedSave = movSpeed;
    var dashLengthSave = dashLength;
    movSpeed = dashSpeed;
    dashLength -= 1;
    dash = true;
}
if (dashLength &lt; 0)
{
    movSpeed = movSpeedSave;
    dashLength = dashLengthSave;
    dash = false;
}

//##Scythe Throw##
if (key_right)
{
    lastDir = 0;
}
if (key_left)
{
    lastDir = 1;
}
//Throw Right
if (!throw)
{
    if (key_throw &amp;&amp; lastDir == 0)
    {
        audio_play_sound(attack_snd, 1, false);
        instance_create(x + 16, y, scythe_obj);
        with (scythe_obj)
        {
            hspeed = scytheSpeed;
        }
        throw = true;
    }
    //Throw Left
    if (key_throw &amp;&amp; lastDir == 1)
    {  
        audio_play_sound(attack_snd, 1, false);  
        instance_create(x - 16, y, scythe_obj);
        with (scythe_obj)
        {
            hspeed = -scytheSpeed;
        }
        throw = true;
    }
}
//Destroy Scythe
if (!key_throw)
{
    if (instance_exists(scythe_obj))
    {
        with (scythe_obj)
        {
            instance_destroy();
        }
        throw = false;
    }
}

//##Combat##
if (key_attack &amp;&amp; !throw &amp;&amp; !attack)
{
    attack = true;
}
if (attack)
{
    var attackDelaySave = attackDelay;
    attackDelay -= 1;
    if (lastDir == 0)
    {
        instance_create(x + 16, y, hitbox_obj);
    }
    if (lastDir == 1)
    {
        instance_create(x - 16, y, hitbox_obj);
    }
    audio_play_sound(attack_snd, 1, false);
}
if (attackDelay &lt; 0)
{
    attack = false;
    attackDelay = attackDelaySave;
}

//##Collision Checking##
//Horizontal
if (!place_free(x + hspeed, y))
{
    while (place_free(x + sign(hspeed), y))
    {
        x += sign(hspeed);
    }
    hspeed = 0;
}
//Vertical
if (!place_free(x, y + vspeed))
{
    while (place_free(x + sign(hspeed), y))
    {
        y += sign(vspeed);
    }
    vspeed = 0;
}

//##Animations##
//Running
if (key_right)
{
    image_speed = 0.15;
    sprite_index = playerWalk_spr;
    image_xscale = 1;
}
if (key_left)
{
    image_speed = 0.15;
    sprite_index = playerWalk_spr;
    image_xscale = -1;
}
//Idle
if (hspeed == 0)
{
    if (lastDir == 0)
    {
        image_speed = 0.145;
        sprite_index = playerIdle_spr;
        image_xscale = 1;
    }
    else
    {
        image_speed = 0.145;
        sprite_index = playerIdle_spr;
        image_xscale = -1;
    }
}
//Falling
if (vspeed &gt; 0)
{
    image_speed = 0.2;
    sprite_index = playerFalling_spr;
    if (lastDir == 0)
    {
        image_xscale = 1;
    }
    else
    {
        image_xscale = -1;
    }
}

//##Death##
if (health &lt; 0)
{
    hspeed = 0;
    vspeed = 0;
    if (key_restart)
    {
        if (!instance_exists(playerDeath_obj))
        {
            instance_create(x, y, playerDeath_obj);
        }
        if (global.checkpointX == 0)
        {
            x = spawn_obj.x;
            y = spawn_obj.y - 8;
        }
        else
        {
            x = global.checkpointX;
            y = global.checkpointY;
            vspeed = 0;
            hspeed = 0;
        }
        global.deathCount += 1;
        health = 2;
    }
}

//##Pause Menu##
if (key_pause)
{
    if (pause == false)
    {
        pause = true;
    }
    else
    {
        pause = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
