<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>playerIdle_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-13</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface = surface_create(room_width, room_height);
surfaceScale = 1/8;
amount = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vars

global.movSpeed = 2.65;
global.jumpStrength = 7.04;
global.numberJumps = 2;
global.gravityStrength = 0.46;
global.ladderSpeed = 3.25;
health = global.healthVar;
attackCooldown = 7;
pauseMenu = false;

horSpeed = 0;
verSpeed = 0;
movement = true;
cooldown = false;
dead = false;
deathCountVar = false;
textTimer = 100;
grounded = false;
landSound = false;
noDamage = false;
nearEnemy = false;
lastDir = 0;
landing = false;
onLadder = false;
invTimer = 90;
throw = false;
animPause = false;
fullJump = false;
dash = true;
dashTimer = 7;
savePosX = 0;
savePosY = 0;

global.hit = false;
global.state = 0;
global.damage = 20;
global.holding = noone;
global.numberJumpsSave = global.numberJumps;
global.checkpointX = 0;
global.checkpointY = 0;
global.checkpointRoom = 0;
global.restart = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Game
if (room != tutorial)
{
    instance_create(view_xview[0] + 610, view_yview[0] + 330, saveIcon_obj);
    if (file_exists("save1.has"))
    {
        file_delete("save1.has");
    }
    ini_open("save1.has");
    var currRoom = room;
    
    ini_write_real("Save1", "current room", currRoom);
    ini_write_real("Save1", "current spawnLocation", global.playerSpawnLocationSave);
    ini_write_real("Save1", "redOrb", global.pickedRed);
    ini_write_real("Save1", "blueOrb", global.pickedBlue);
    ini_write_real("Save1", "money", global.money);
    ini_write_real("Save1", "health", global.healthVar);
    ini_write_real("Save1", "gamemode", global.mode);
    ini_write_real("Save1", "death count", global.deathCount);
    ini_close();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Game
/*
playerInst = player_obj;

if (global.continued == true)
{
    if (file_exists("save1.has"))
    {
        ini_open("save1.has");  

        with (playerInst)
        {
            instance_destroy();
        }
        room_goto(global.loadedRoom);
        global.transition = false;
        global.playerSpawnLocation = 0;
        ini_close();
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cooldown = false;
animPause = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>landing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_vibration(0, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement etc.

//###Movement###
if (movement == true)
{
    x = x + horSpeed;
    y = y + verSpeed;
}

key_left = keyboard_check(ord('A')) || gamepad_axis_value(0, gp_axislh) &lt; 0;
key_right = keyboard_check(ord('D')) || gamepad_axis_value(0, gp_axislh) &gt; 0;
key_jump = keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(0, gp_face1);
key_jump_release = keyboard_check_released(vk_space) || gamepad_button_check_released(0, gp_face1);
key_attack = keyboard_check_pressed(ord('K')) || gamepad_button_check_pressed(0, gp_shoulderr);
key_throw = keyboard_check(ord('J')) || gamepad_button_check(0, gp_shoulderl);
key_restart = keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0, gp_face1);
key_pause = keyboard_check_pressed(vk_escape) || gamepad_button_check_pressed(0, gp_start);
gamepad_set_axis_deadzone(0, 0.55);
var move = key_right - key_left;
horSpeed = move * global.movSpeed;

if (keyboard_check_pressed(ord('J'))  &amp;&amp; verSpeed &gt; 0 &amp;&amp; dash == false || gamepad_button_check_pressed(0, gp_shoulderl) &amp;&amp; verSpeed &gt; 0 &amp;&amp; dash == false)
{
    dash = true;
}
if (dash == true)
{
    global.movSpeed = 5.95;
    if (!instance_exists(dashEffect_obj))
    {
        instance_create(x, y, dashEffect_obj);
    }
    dashTimer = dashTimer - 1;
}
if (dashTimer &lt;= 0 || grounded == true || onLadder == true)
{
    dash = false;
    global.movSpeed = 2.65;
    dashTimer = 7;
}

//###OutsideSolid###
if (place_free(x, y))
{
    savePosX = x;
    savePosY = y;
}
else
{
    x = savePosX;
    y = savePosY;
    verSpeed = 0;
}

//###Scythe Throw###
if (key_throw)
{
    if (lastDir == 0)
    {
        if (!throw)
        {
            instance_create(x + 16, y, scythe_obj);
            if (!audio_is_playing(attack_snd))
            {
                audio_play_sound(attack_snd, 1, false);
            }
            throw = true;
            with (scythe_obj)
            {
                hspeed = 6.2;
            }
        }
    }
    else
    {
        if (!throw)
        {
            instance_create(x - 16, y, scythe_obj);
            if (!audio_is_playing(attack_snd))
            {
                audio_play_sound(attack_snd, 1, false);
            }
            throw = true;
            with (scythe_obj)
            {
                hspeed = -6.2;
            }
        }
    }
}
else
{
    if (instance_exists(scythe_obj))
    {
        with (scythe_obj)
        {
            instance_destroy();
        }
    }
    if (grounded == true)
    {
        throw = false;
    }
}


//###Animation###
if (movement == true)
{
    if (key_right &amp;&amp; animPause == false)
    {
        lastDir = 0;
        image_speed = 0.15;
        sprite_index = playerWalk_spr;
        image_xscale = 1;
    }
    if (key_left &amp;&amp; animPause == false)
    {
        lastDir = 1;
        image_speed = 0.15;
        sprite_index = playerWalk_spr;
        image_xscale = -1;
    }
    
    if (horSpeed == 0 &amp;&amp; animPause == false)
    {
        if (lastDir == 0)
        {
            image_speed = 0.145;
            sprite_index = playerIdle_spr;
            image_xscale = 1;
        }
        else
        {
            image_speed = 0.145;
            sprite_index = playerIdle_spr;
            image_xscale = -1;
        }
    }
    
    if (verSpeed &gt; 0 &amp;&amp; animPause == false)
    {
        image_speed = 0.2;
        sprite_index = playerFalling_spr;
        if (lastDir == 0)
        {
            image_xscale = 1;
        }
        else
        {
            image_xscale = -1;
        }
    }
    
    if (landing == true &amp;&amp; animPause == false)
    {
        image_speed = 0.1;
        sprite_index = playerLanding_spr;
        if (lastDir == 0)
        {
            image_xscale = 1;
        }
        else
        {
            image_xscale = -1;
        }
    }
    /*
    if (verSpeed &lt; 0)
    {
        sprite_index = playerJump_spr;
    }
    */
    if (noDamage == true)
    {
        sprite_index = playerInvincible_spr;
        if (invTimer &gt;= 30)
        {
            image_speed = 0.5;
        }
        else
        {
            image_speed = 0.2;
        }
        if (lastDir == 0)
        {
            image_xscale = 1;
        }
        else
        {
            image_xscale = -1;
        }
    }
}
    
//###Gravity###
if (movement == true)
{
    if (verSpeed &lt; 14)
    {
        if (onLadder == false)
        {
            verSpeed = verSpeed + global.gravityStrength;
        }
        else
        {
            if (place_meeting(x, y, ladder_obj))
            {
                verSpeed = 2.75;
            }
            else
            {
                verSpeed = 0;
            }
        }
    }

    if (!place_free(x, y + 1) &amp;&amp; (key_jump)) || (key_jump) &amp;&amp; (global.numberJumps &gt; 0)
    {
        verSpeed = -global.jumpStrength;
        global.numberJumps = global.numberJumps - 1;
    }
    
    if (key_jump_release &amp;&amp; fullJump == false)
    {
        if (verSpeed &lt; 0)
        {
            verSpeed = verSpeed / 2;
        }
    }
}
    
//###Combat###
if (key_attack &amp;&amp; movement == true &amp;&amp; !throw)
{
    if (!audio_is_playing(attack_snd))
    {
        audio_play_sound(attack_snd, 1, false);
    }
    animPause = true;
    alarm[2] = attackCooldown;
    image_speed = 0.1;
    sprite_index = playerAttack_spr;
    if (image_index == 1)
    {
        image_speed = 0;
        image_index = 1;
    }
    if (cooldown == false)
    {
        if (lastDir == 0)
        {
            instance_create(x + 16, y, hitbox_obj);
            cooldown = true
            image_xscale = 1;
        }
        else
        {
            instance_create(x - 16, y, hitbox_obj);
            cooldown = true
            image_xscale = -1;
        }
    }
}

if ((grounded == false) &amp;&amp; (distance_to_object(enemy_obj) &lt; 128))
{
    nearEnemy = true;
    if (key_attack)
    {
        //global.state = 1;
    }
}
else
{
    nearEnemy = false;
}

switch (global.state)
{
case 1:
    targetInst = instance_nearest(x, y, enemy_obj);
    targetX = targetInst.x;
    targetY = targetInst.y;
    global.state = 2;
    break;
    
case 2:
    if (distance_to_point(targetX, targetY) &lt; 32)
    {
        global.state = 3;
    }
    else
    {
        move_towards_point(targetX, targetY, 7.4);
        if (!place_free(x + 64, y + 64) || !place_free(x -64, y-64))
        {
            global.state = 3;
        }
        instance_create(x, y, hitbox_obj);
    }
    break;

case 3:
    speed = 0;
    verSpeed = 0;
    horSpeed = 0;
    global.state = 4;
    break;
    
case 4:
    if (global.numberJumps &lt; 1)
    {
        global.numberJumps = global.numberJumps + 1;
    }
    verSpeed = -4;
    global.state = 0;
    break;
}

//###Collision Checking###
grounded = false;


if (landSound == true)
{
    if (!audio_is_playing(land_snd))
    {
        audio_play_sound(land_snd, 1, false);
        landSound = false;
    }
}

if (!place_free(x + horSpeed, y))
{
    while (place_free(x + sign(horSpeed), y))
    {
        x = x + sign(horSpeed);
    }
    horSpeed = 0;
    fullJump = false;
    //grounded = true;
} 
if (!place_free(x, y + verSpeed))
{
    while (place_free(x, y + sign(verSpeed)))
    {
        y = y + sign(verSpeed);
        landSound = true;
    }
    grounded = true;
    fullJump = false;
    if (verSpeed &gt;= 13)
    {
        gamepad_set_vibration(0, 0.4, 0.4);
        alarm[0] = 10;
    }
    if (verSpeed &gt;= 2)
    {
        alarm[1] = 8;
    }
    verSpeed = 0;
    if (!place_free(x, y + 1))
    {
        global.numberJumps = global.numberJumpsSave;
    }
}

//###Death###
if (health == 0)
{
    deathCountVar = true;
}
if (health &lt; 0)
{
    horSpeed = 0;
    verSpeed = 0;
    dead = true;
    if (key_restart)
    {
        if (!instance_exists(playerDeath_obj))
        {
            instance_create(x, y, playerDeath_obj);
        }
        if (global.checkpointX == 0)
            {
                x = spawn_obj.x;
                y = spawn_obj.y - 8;
            }
            else
            {
                x = global.checkpointX;
                y = global.checkpointY;
                verSpeed = 0;
                horSpeed = 0;
            }
            health = 2;
            dead = false;
    }
}

if (deathCountVar == true)
{
    global.deathCount = global.deathCount + 1;
    deathCountVar = false;
    health = health - 1;
}

//###Pause Menu###
if (key_pause)
{
    if (pauseMenu == false)
    {
        pauseMenu = true;
    }
    else
    {
        pauseMenu = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision

//###Scythe Collision###
if (place_meeting(x, y, scythe_obj) &amp;&amp; global.throwing == false)
{   
    //###Collision Checking###
    if (!place_free(x + horSpeed, y))
    {
        while (place_free(x + sign(horSpeed), y))
        {
            x = x + sign(horSpeed);
        }
        horSpeed = 0;
    }
    else
    {
        verSpeed = -9;
    }
    if (!place_free(x, y + verSpeed))
    {
        while (place_free(x, y + sign(verSpeed)))
        {
            y = y + sign(verSpeed);
        }
        verSpeed = 0;
    }
    else
    {
        verSpeed = -9;
    }
    fullJump = true;
    global.numberJumps = global.numberJumps - 1;
    with (scythe_obj)
    {
        instance_destroy();
    }
}


//###Checkpoint Collision###
if (place_meeting(x, y, checkpoint_obj) || (place_meeting(x, y, checkpointMystery_obj)))
{
    health = global.healthVar;
    global.checkpointX = other.x;
    global.checkpointY = other.y;
    global.checkpointRoom = room;
    instance_activate_object(glassBlockBroken_obj);
    instance_activate_object(enemyNormal_obj);
    instance_activate_object(slimeGreen_obj);
    instance_activate_object(enemyNormal2_obj);
    instance_activate_object(enemySkeletonRed_obj);
    instance_activate_object(enemyMystery_obj);
    instance_activate_object(enemyFlyingCloud_obj);
    instance_activate_object(enemyBat_obj);
    instance_activate_object(scytheReload_obj);
    instance_activate_object(boxWood_obj);
    instance_activate_object(grassBlock2Boss_obj);
    instance_activate_object(pirate_obj);
    other.image_index = 1;
    noDamage = false;
    if (global.restart == false)
    {
        global.restart = true;
    }
}
//###Damage Collision###
if (place_meeting(x, y, lava_obj) || place_meeting(x, y, spikeRed_obj))
{
    health = health - 99;
    alarm[0] = 10;
}
    
if (global.hit == true)
{
    gamepad_set_vibration(0, 0.3, 0.3);
    if (verSpeed &gt; 0)
    {
        verSpeed = -7;
    }
    if (verSpeed &lt; 0)
    {
        verSpeed = 7;
    }

    //###Collision Checking###
    if (!place_free(x + horSpeed, y))
    {
        while (place_free(x + sign(horSpeed), y))
        {
            x = x + sign(horSpeed);
        }
        horSpeed = 0;
    }
    else
    {
        verSpeed = -global.ladderSpeed;
    }
    if (!place_free(x, y + verSpeed))
    {
        while (place_free(x, y + sign(verSpeed)))
        {
            y = y + sign(verSpeed);
        }
        verSpeed = 0;
    }
    else
    {
        verSpeed = -global.ladderSpeed;
        global.numberJumps = global.numberJumpsSave;
    }

    //horSpeed = 5 * sign(horSpeed);
    if (noDamage == false)
    {
        health = health - 1;
    }
    alarm[0] = 10;
    noDamage = true;
    global.hit = false;
}

if (noDamage == true)
{
    invTimer = invTimer - 1;
}

if (invTimer &lt;= 0)
{
    noDamage = false;
    gamepad_set_vibration(0, 0, 0);
    invTimer = 90;
}
//###Ladder Collision###
key_jump = keyboard_check(vk_space) || gamepad_button_check(0, gp_face1);
if (place_meeting(x, y, ladder_obj))
{
    global.numberJumps = global.numberJumpsSave;
    if (key_jump)
    {
        //###Collision Checking###
        if (!place_free(x + horSpeed, y))
        {
            while (place_free(x + sign(horSpeed), y))
            {
                x = x + sign(horSpeed);
            }
            horSpeed = 0;
        }
        else
        {
            verSpeed = -global.ladderSpeed;
        }
        if (!place_free(x, y + verSpeed))
        {
            while (place_free(x, y + sign(verSpeed)))
            {
                y = y + sign(verSpeed);
            }
            verSpeed = 0;
        }
        else
        {
            verSpeed = -global.ladderSpeed;
        }
    }
    else
    {
        onLadder = true;
    }
}
else
{
    onLadder = false;
}   
//###Lever Collision###
/*
if (place_meeting(x, y, lever_obj))
{
    global.hitLever = true;
}
if (place_meeting(x, y, leverBlue_obj))
{
    global.hitLeverBlue = true;
}
if (place_meeting(x, y, leverRed_obj))
{
    global.hitLeverRed = true;
}
*/
//###Key Collision###
if (place_meeting(x, y, key_obj))
{
    global.holding = other.id;
}
//###Water Collision###
if (place_meeting(x, y, water_obj))
{
    horSpeed = horSpeed / 1.75;
    verSpeed = verSpeed / 1.02;
}
//###Quicksand Collision###
if (place_meeting(x, y, quicksandBlock_obj))
{
    horSpeed = horSpeed / 1.75;
    verSpeed = verSpeed / 1.15;
}
//###FlyingCloud Collision###
if (place_meeting(x, y, flyingCloud_obj))
{
    horSpeed = horSpeed / 2.75;
    verSpeed = verSpeed / 1.2;
}
//###Money Collision###
if (place_meeting(x, y, darkSpirit_obj))
{
    global.money = global.money + 1;
}
if (place_meeting(x, y, darkSpiritBig_obj))
{
    global.money = global.money + 10;
}
//###GlassBlockBroken Collision###
if (place_meeting(x, y, glassBlockBroken_obj))
{
    horSpeed = 5 * sign(horSpeed);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
///Debug
//###Easy Mode###
if (keyboard_check_pressed(ord('0')))
{
    if (global.mode == 0)
    {
        global.mode = 1;
    }
    else
    {
        global.mode = 0;
    }
}

//###Debug Stuff###
if (keyboard_check_pressed(ord('1')) &amp;&amp; room != sentinelGravesBoss)
{
    global.playerSpawnLocation = 0;
    room_goto(sentinelGravesBoss);
}

if (keyboard_check_pressed(ord('2')) &amp;&amp; room != skullcoinBay1)
{
    global.playerSpawnLocation = 0;
    room_goto(skullcoinBay1);
}
if (keyboard_check_pressed(ord('3')) &amp;&amp; room != sentinelGraves3)
{
    global.playerSpawnLocation = 0;
    room_goto(sentinelGraves3);
}
if (keyboard_check_pressed(ord('4')) &amp;&amp; room != deepPrison)
{
    global.playerSpawnLocation = 0;
    room_goto(deepPrison);
}
if (keyboard_check_pressed(ord('5')) &amp;&amp; room != overcastPeak1)
{
    global.playerSpawnLocation = 0;
    room_goto(overcastPeak1);
}
if (keyboard_check_pressed(ord('6')) &amp;&amp; room != overcastPeak2)
{
    global.playerSpawnLocation = 0;
    room_goto(overcastPeak2);
}
if (keyboard_check_pressed(ord('7')) &amp;&amp; room != overcastPeak3)
{
    global.playerSpawnLocation = 0;
    room_goto(overcastPeak3);
}
if (keyboard_check_pressed(ord('8')) &amp;&amp; room != overcastPeak4)
{
    global.playerSpawnLocation = 0;
    room_goto(overcastPeak4);
}

if (keyboard_check_pressed(ord('9')) &amp;&amp; room != overcastPeak5)
{
    global.playerSpawnLocation = 0;
    room_goto(overcastPeak5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
global.guiPosX = view_xview[0];
global.guiPosY = view_yview[0];
draw_set_font(gui_fnt);

//###Health###
if (health == 6)
{
    draw_sprite(heart_spr, 0, global.guiPosX + 36, global.guiPosY + 36);
    draw_sprite(heart_spr, 0, global.guiPosX + 90, global.guiPosY + 36);
    draw_sprite(heart_spr, 0, global.guiPosX + 144, global.guiPosY + 36);
}
if (health == 5)
{
    draw_sprite(heart_spr, 0, global.guiPosX + 36, global.guiPosY + 36);
    draw_sprite(heart_spr, 0, global.guiPosX + 90, global.guiPosY + 36);
    draw_sprite(heart_spr, 1, global.guiPosX + 144, global.guiPosY + 36);
}
if (health == 4)
{
    draw_sprite(heart_spr, 0, global.guiPosX + 36, global.guiPosY + 36);
    draw_sprite(heart_spr, 0, global.guiPosX + 90, global.guiPosY + 36);
}
if (health == 3)
{
    draw_sprite(heart_spr, 0, global.guiPosX + 36, global.guiPosY + 36);
    draw_sprite(heart_spr, 1, global.guiPosX + 90, global.guiPosY + 36);
}
if (health == 2)
{
    draw_sprite(heart_spr, 0, global.guiPosX + 36, global.guiPosY + 36);
}
if (health == 1)
{
    draw_sprite(heart_spr, 1, global.guiPosX + 36, global.guiPosY + 36);
}
if (health == 0)
{
    draw_sprite(heart_spr, 2, global.guiPosX + 36, global.guiPosY + 36);
}

//###Money###
draw_sprite(darkSpiritIcon_spr, 0, global.guiPosX + 36, global.guiPosY + 76);
draw_set_color(c_white);
draw_text(global.guiPosX + 55, global.guiPosY + 72, string(global.money));

//###GUI###
/*
draw_set_colour(c_white);
draw_text(global.guiPosX + 8, global.guiPosY + 272, "Gamemode = " + string(global.mode));
draw_text(global.guiPosX + 8, global.guiPosY + 288, "VSpeed = " + string(verSpeed));
draw_text(global.guiPosX + 8, global.guiPosY + 304, "FPS = " + string(fps_real));
draw_text(global.guiPosX + 8, global.guiPosY + 320, "State = " + string(global.state));
draw_text(global.guiPosX + 8, global.guiPosY + 336, "playerSpawnLocation = " + string(global.playerSpawnLocation));
*/
//draw_text(guiPosX + 8, guiPosY + 80, "'R' to Restart Room!");

draw_set_colour(c_white);
//###Ring Inventory###
draw_sprite(ringbox_spr, 0, view_xview[0] + 617, view_yview[0] + 35);
draw_sprite(ringbox_spr, 0, view_xview[0] + 617, view_yview[0] + 78

);

//###World Text###
if (room == gardenValley &amp;&amp; global.spawned == true)
{
    draw_set_font(message_fnt);
    draw_set_colour(c_white);
    draw_text(global.guiPosX + 90, global.guiPosY + 70, "Now Entering: Garden Valley");
    textTimer = textTimer - 0.5;
    if (textTimer &lt;= 0)
    {
        global.spawned = false;
        textTimer = 100;
    }
}
else
{
    draw_set_alpha(1);
}
if (room == unknownForest1 &amp;&amp; global.spawned == true)
{
    draw_set_font(message_fnt);
    draw_set_colour(c_white);
    draw_text(global.guiPosX + 90, global.guiPosY + 70, "Now Entering: Unknown Forest");
    textTimer = textTimer - 0.5;
    if (textTimer &lt;= 0)
    {
        global.spawned = false;
        textTimer = 100;
    }
}
else
{
    draw_set_alpha(1);
}
if (room == unknownForest3 &amp;&amp; global.spawned == true)
{
    draw_set_font(message_fnt);
    draw_set_colour(c_white);
    draw_text(global.guiPosX + 90, global.guiPosY + 70, "Now Entering: Fading Mansion");
    textTimer = textTimer - 0.5;
    if (textTimer &lt;= 0)
    {
        global.spawned = false;
        textTimer = 100;
    }
}
else
{
    draw_set_alpha(1);
}
if (room == undergroundCity1 &amp;&amp; global.spawned == true)
{
    draw_set_font(message_fnt);
    draw_set_colour(c_white);
    draw_text(global.guiPosX + 90, global.guiPosY + 70, "Now Entering: Underground City");
    textTimer = textTimer - 0.5;
    if (textTimer &lt;= 0)
    {
        global.spawned = false;
        textTimer = 100;
    }
}
else
{
    draw_set_alpha(1);
}
if (room == demonsKeep1 &amp;&amp; global.spawned == true)
{
    draw_set_font(message_fnt);
    draw_set_colour(c_white);
    draw_text(global.guiPosX + 90, global.guiPosY + 70, "Now Entering: Demons Keep");
    textTimer = textTimer - 0.5;
    if (textTimer &lt;= 0)
    {
        global.spawned = false;
        textTimer = 100;
    }
}
else
{
    draw_set_alpha(1);
}
if (room == demonsKeep2 &amp;&amp; global.spawned == true)
{
    draw_set_font(message_fnt);
    draw_set_colour(c_white);
    draw_text(global.guiPosX + 90, global.guiPosY + 70, "Now Entering: Castle of Regret");
    textTimer = textTimer - 0.5;
    if (textTimer &lt;= 0)
    {
        global.spawned = false;
        textTimer = 100;
    }
}
else
{
    draw_set_alpha(1);
}
if (room == demonsKeep3 &amp;&amp; global.spawned == true)
{
    draw_set_font(message_fnt);
    draw_set_colour(c_white);
    draw_text(global.guiPosX + 90, global.guiPosY + 70, "Now Entering: Demons Keep");
    textTimer = textTimer - 0.5;
    if (textTimer &lt;= 0)
    {
        global.spawned = false;
        textTimer = 100;
    }
}
else
{
    draw_set_alpha(1);
}
if (room == sentinelGraves1 &amp;&amp; global.spawned == true)
{
    draw_set_font(message_fnt);
    draw_set_colour(c_white);
    draw_text(global.guiPosX + 90, global.guiPosY + 70, "Now Entering: Sentinel Graves");
    textTimer = textTimer - 0.5;
    if (textTimer &lt;= 0)
    {
        global.spawned = false;
        textTimer = 100;
    }
}
else
{
    draw_set_alpha(1);
}
if (room == sentinelGraves2 &amp;&amp; global.spawned == true)
{
    draw_set_font(message_fnt);
    draw_set_colour(c_white);
    draw_text(global.guiPosX + 90, global.guiPosY + 70, "Now Entering: Sentinel Graves");
    textTimer = textTimer - 0.5;
    if (textTimer &lt;= 0)
    {
        global.spawned = false;
        textTimer = 100;
    }
}
else
{
    draw_set_alpha(1);
}
if (room == deepPrison &amp;&amp; global.spawned == true)
{
    draw_set_font(message_fnt);
    draw_set_colour(c_white);
    draw_text(global.guiPosX + 90, global.guiPosY + 70, "Now Entering: Deep Prison");
    textTimer = textTimer - 0.5;
    if (textTimer &lt;= 0)
    {
        global.spawned = false;
        textTimer = 100;
    }
}
else
{
    draw_set_alpha(1);
}
if (room == overcastPeak2 &amp;&amp; global.spawned == true)
{
    draw_set_font(message_fnt);
    draw_set_colour(c_white);
    draw_text(global.guiPosX + 90, global.guiPosY + 70, "Now Entering: Overcast Peak");
    textTimer = textTimer - 0.5;
    if (textTimer &lt;= 0)
    {
        global.spawned = false;
        textTimer = 100;
    }
}
else
{
    draw_set_alpha(1);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Black Screen

if (dead == true)
{
    if (amount &lt; 1)
    {
        amount = amount + 0.01;
    }
}
else
{
    if (amount &gt; 0)
    {
        amount -= 0.01;
    }
}

if !surface_exists(surface)
{
    surface = surface_create(room_width, room_height);
    surfaceScale = 1/8;
}
else
{
    surface_set_target(surface);
    draw_clear(c_black);
    surface_reset_target();
    draw_surface_ext(surface, 0, 0, 1/surfaceScale, 1/surfaceScale, 0, c_white, amount);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause Menu

if (pauseMenu == true)
{
    movement = false;
    amount = 0.6;
}
else
{
    movement = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
