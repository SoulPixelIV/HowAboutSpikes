<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menuSite = 0;
menuElements[0] = "";
selectedElement = 0;
saveMPStatus = -1;

script_execute(globalSettings);
if (steam_initialised())
{
    if (file_exists("speed.has"))
    {
        ini_open("speed.has");        
        var scoreFinal = ini_read_string("Speed Vars", "score", 0);
        steam_upload_score("Game Times", base64_decode(scoreFinal));
        ini_close();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cursor Movement
if (keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord("W")) || gamepad_button_check_pressed(0, gp_padu))
{
    if (!audio_is_playing(click_snd))
    {
        audio_play_sound(click_snd, 1, false);
    }
    if (selectedElement &gt; -1)
    {
        selectedElement--;
    }
    if (selectedElement == -1)
    {
        for (x = 0; x &lt; array_length_1d(menuElements); x++)
        {
            if (menuElements[x] == "")
            {
                selectedElement = x - 1;
                exit;
            }
            if (x == array_length_1d(menuElements) - 1 &amp;&amp; menuElements[x] != "")
            {
                selectedElement = array_length_1d(menuElements) - 1;
                exit;
            }
        }
    }
}
if (keyboard_check_pressed(vk_down) || keyboard_check_pressed(ord("S")) || gamepad_button_check_pressed(0, gp_padd))
{
    if (!audio_is_playing(click_snd))
    {
        audio_play_sound(click_snd, 1, false);
    }
    if (selectedElement &lt; array_length_1d(menuElements) - 1)
    {
        for (y = 0; y &lt; array_length_1d(menuElements) - 1; y++)
        {
            if (menuElements[y + 1] == "")
            {
                if (y == selectedElement)
                {
                    selectedElement = 0;
                    exit;
                }
                else
                {
                    selectedElement++;
                    exit;
                }
            }
        }
    }
    if (selectedElement == array_length_1d(menuElements) - 1)
    {
        selectedElement = 0;
    }
}

if (keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace) || gamepad_button_check_pressed(0, gp_face2))
{
    selectedElement = 0;
    switch (menuSite)
    {
        case 2:
            menuSite = 1;
            break;
        case 3:
            menuSite = 2;
            break;
        case 4:
            menuSite = 2;
            break;
        case 5:
            menuSite = 2;
            break;
        case 6:
            menuSite = 1;
            break;
        case 7:
            menuSite = 1;
            break;
        case 8:
            menuSite = 1;
            break;
    }
}

//Menu Sites
if (keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(0, gp_face1))
{
    switch (menuSite)
    {
        case 0:
            menuSite = 1;
            break;
        case 1:
            switch (selectedElement)
            {
                case 0:
                    menuSite = 7;
                    break;
                case 1:
                    menuSite = 6;
                    break;
                case 2:
                    menuSite = 8;
                    break;
                case 3:
                    menuSite = 2;
                    break;
                case 4:
                    game_end();
                    break;
            }
            break;
        case 2:
            switch (selectedElement)
            {
                case 0:
                    menuSite = 3;
                    break;
                case 1:
                    menuSite = 4;
                    break;
                case 2:
                    menuSite = 5;
                    break;
                case 3:
                    menuSite = 1;
                    break;
            }
            break;
        case 3:
            switch (selectedElement)
            {
                case 0:
                    if window_get_fullscreen()
                    {
                        window_set_fullscreen(false);
                    }
                    else
                    {
                        window_set_fullscreen(true);
                    }
                    break;
                case 2:
                    menuSite = 2;
                    break; 
            }
            break;
        case 4:
            switch (selectedElement)
            {
                case 0:
                    //MUSIC VOLUME
                    break;
                case 1:
                    menuSite = 2;
                    break;
            }
            break;
        case 5:
            switch (selectedElement)
            {
                case 0:
                    break;
                case 1:
                    break;
                case 2:
                    break;
                case 3:
                    break;
                case 4:
                    break;
                case 5:
                    menuSite = 2;
                    break;
            }
            break;
        case 6:
            switch (selectedElement)
            {
                case 0:
                    global.mpStatus = 0;
                    menuSite = 7;               
                    break;
                case 1:
                    global.mpStatus = 1;
                    menuSite = 7;
                    break;
                case 2:
                    menuSite = 1;
                    break;
            }
            break;
        case 7:
            switch (selectedElement)
            {
                case 0:
                    if (file_exists("save1.has"))
                    {
                        global.continued = true;
                        ini_open("save1.has");
                        global.loadedRoom = ini_read_real("Save1", "current room", 1);
                        global.playerSpawnLocation = ini_read_real("Save1", "current spawnLocation", 0);
                        global.pickedRed = ini_read_real("Save1", "redOrb", true);
                        global.pickedBlue = ini_read_real("Save1", "blueOrb", true);
                        global.placedRed = ini_read_real("Save1", "redOrbPlaced", true);
                        global.placedBlue = ini_read_real("Save1", "blueOrbPlaced", true);
                        global.placedRed2 = ini_read_real("Save1", "redOrbPlaced2", true);
                        global.placedBlue2 = ini_read_real("Save1", "blueOrbPlaced2", true);
                        global.mode = ini_read_real("Save1", "gamemode", 0);
                        global.deathCount = ini_read_real("Save1", "death count", 0);
                        global.healthVar = ini_read_real("Save1", "health", 2);
                        global.money = ini_read_real("Save1", "money", 0);
                        global.pickedUltraSouls = ini_read_real("Save1", "ultraSouls", 0);
                        global.pickedTooth = ini_read_real("Save1", "picked tooth", false);
                        global.pickedKey = ini_read_real("Save1", "picked key", true);
                        global.pickedGoldchain = ini_read_real("Save1", "picked goldchain", false);
                        global.ringVision = ini_read_real("Save1", "ring Vision", false);
                        global.ringWealth = ini_read_real("Save1", "ring Wealth", false);
                        global.ringPower = ini_read_real("Save1", "ring Power", false);
                        global.ringFriendship = ini_read_real("Save1", "ring Friendship", false);
                        global.ringInventory[0] = ini_read_real("Save1", "ring Inventory0", -1);
                        global.ringInventory[1] = ini_read_real("Save1", "ring Inventory1", -1);
                        global.opDoor = ini_read_real("Save1", "opDoor", true);
                        global.gvDoor = ini_read_real("Save1", "gvDoor", true);
                        global.scbDoor = ini_read_real("Save1", "scbDoor", true);
                        global.daughterHelped = ini_read_real("Save1", "daughterHelped", true);
                        global.map = ini_read_real("Save1", "map", 0);
                        global.level = ini_read_real("Save1", "levelNPC", 0);
                        global.dmgMult = ini_read_real("Save1", "dmgMult", 1);
                        global.spawnBoss = ini_read_real("Save1", "spawnBoss", true);
                        
                        //Ultra Souls
                        global.ultraSoul1 = ini_read_real("Save1", "ultraSoul1", 0);
                        global.ultraSoul2 = ini_read_real("Save1", "ultraSoul2", 0);
                        global.ultraSoul3 = ini_read_real("Save1", "ultraSoul3", 0);
                        global.ultraSoul4 = ini_read_real("Save1", "ultraSoul4", 0);
                        global.ultraSoul5 = ini_read_real("Save1", "ultraSoul5", 0);
                        global.ultraSoul6 = ini_read_real("Save1", "ultraSoul6", 0);
                        global.ultraSoul7 = ini_read_real("Save1", "ultraSoul7", 0);
                        
                        //Trapdoor0
                        global.gardenValleyTD[0] = ini_read_real("Save1", "gardenValley[0]", 0);
                        global.unknownForest1TD[0] = ini_read_real("Save1", "unknownForest1[0]", 0);
                        global.unknownForest2TD[0] = ini_read_real("Save1", "unknownForest2[0]", 0);
                        global.unknownForest3TD[0] = ini_read_real("Save1", "unknownForest3[0]", 0);
                        global.demonsKeep1TD[0] = ini_read_real("Save1", "demonsKeep1[0]", 0);
                        global.demonsKeep2TD[0] = ini_read_real("Save1", "demonsKeep2[0]", 0);
                        global.demonsKeep3TD[0] = ini_read_real("Save1", "demonsKeep3[0]", 0);
                        global.undergroundCity1TD[0] = ini_read_real("Save1", "undergroundCity1[0]", 0);
                        global.undergroundCity2TD[0] = ini_read_real("Save1", "undergroundCity2[0]", 0);
                        global.undergroundCity3TD[0] = ini_read_real("Save1", "undergroundCity3[0]", 0);
                        global.sentinelGraves1TD[0] = ini_read_real("Save1", "sentinelGraves1[0]", 0);
                        global.sentinelGraves2TD[0] = ini_read_real("Save1", "sentinelGraves2[0]", 0);
                        global.deepPrisonTD[0] = ini_read_real("Save1", "deepPrison[0]", 0);
                        global.overcastPeak1TD[0] = ini_read_real("Save1", "overcastPeak1[0]", 0);
                        global.overcastPeak2TD[0] = ini_read_real("Save1", "overcastPeak2[0]", 0);
                        global.overcastPeak3TD[0] = ini_read_real("Save1", "overcastPeak3[0]", 0);
                        global.overcastPeak4TD[0] = ini_read_real("Save1", "overcastPeak4[0]", 0);
                        global.overcastPeak5TD[0] = ini_read_real("Save1", "overcastPeak5[0]", 0);
                        global.skullcoinBay1TD[0] = ini_read_real("Save1", "skullcoinBay1[0]", 0);
                        global.skullcoinBay2TD[0] = ini_read_real("Save1", "skullcoinBay2[0]", 0);
                        global.skullcoinBay3TD[0] = ini_read_real("Save1", "skullcoinBay3[0]", 0);
                        global.skullcoinBay4TD[0] = ini_read_real("Save1", "skullcoinBay4[0]", 0);
                        //Trapdoor1
                        global.gardenValleyTD[1] = ini_read_real("Save1", "gardenValley[1]", 0);
                        global.unknownForest1TD[1] = ini_read_real("Save1", "unknownForest1[1]", 0);
                        global.unknownForest2TD[1] = ini_read_real("Save1", "unknownForest2[1]", 0);
                        global.unknownForest3TD[1] = ini_read_real("Save1", "unknownForest3[1]", 0);
                        global.demonsKeep1TD[1] = ini_read_real("Save1", "demonsKeep1[1]", 0);
                        global.demonsKeep2TD[1] = ini_read_real("Save1", "demonsKeep2[1]", 0);
                        global.demonsKeep3TD[1] = ini_read_real("Save1", "demonsKeep3[1]", 0);
                        global.undergroundCity1TD[1] = ini_read_real("Save1", "undergroundCity1[1]", 0);
                        global.undergroundCity2TD[1] = ini_read_real("Save1", "undergroundCity2[1]", 0);
                        global.undergroundCity3TD[1] = ini_read_real("Save1", "undergroundCity3[1]", 0);
                        global.sentinelGraves1TD[1] = ini_read_real("Save1", "sentinelGraves1[1]", 0);
                        global.sentinelGraves2TD[1] = ini_read_real("Save1", "sentinelGraves2[1]", 0);
                        global.deepPrisonTD[1] = ini_read_real("Save1", "deepPrison[1]", 0);
                        global.overcastPeak1TD[1] = ini_read_real("Save1", "overcastPeak1[1]", 0);
                        global.overcastPeak2TD[1] = ini_read_real("Save1", "overcastPeak2[1]", 0);
                        global.overcastPeak3TD[1] = ini_read_real("Save1", "overcastPeak3[1]", 0);
                        global.overcastPeak4TD[1] = ini_read_real("Save1", "overcastPeak4[1]", 0);
                        global.overcastPeak5TD[1] = ini_read_real("Save1", "overcastPeak5[1]", 0);
                        global.skullcoinBay1TD[1] = ini_read_real("Save1", "skullcoinBay1[1]", 0);
                        global.skullcoinBay2TD[1] = ini_read_real("Save1", "skullcoinBay2[1]", 0);
                        global.skullcoinBay3TD[1] = ini_read_real("Save1", "skullcoinBay3[1]", 0);
                        global.skullcoinBay4TD[1] = ini_read_real("Save1", "skullcoinBay4[1]", 0);
                        //Trapdoor2
                        global.gardenValleyTD[2] = ini_read_real("Save1", "gardenValley[2]", 0);
                        global.unknownForest1TD[2] = ini_read_real("Save1", "unknownForest1[2]", 0);
                        global.unknownForest2TD[2] = ini_read_real("Save1", "unknownForest2[2]", 0);
                        global.unknownForest3TD[2] = ini_read_real("Save1", "unknownForest3[2]", 0);
                        global.demonsKeep1TD[2] = ini_read_real("Save1", "demonsKeep1[2]", 0);
                        global.demonsKeep2TD[2] = ini_read_real("Save1", "demonsKeep2[2]", 0);
                        global.demonsKeep3TD[2] = ini_read_real("Save1", "demonsKeep3[2]", 0);
                        global.undergroundCity1TD[2] = ini_read_real("Save1", "undergroundCity1[2]", 0);
                        global.undergroundCity2TD[2] = ini_read_real("Save1", "undergroundCity2[2]", 0);
                        global.undergroundCity3TD[2] = ini_read_real("Save1", "undergroundCity3[2]", 0);
                        global.sentinelGraves1TD[2] = ini_read_real("Save1", "sentinelGraves1[2]", 0);
                        global.sentinelGraves2TD[2] = ini_read_real("Save1", "sentinelGraves2[2]", 0);
                        global.deepPrisonTD[2] = ini_read_real("Save1", "deepPrison[2]", 0);
                        global.overcastPeak1TD[2] = ini_read_real("Save1", "overcastPeak1[2]", 0);
                        global.overcastPeak2TD[2] = ini_read_real("Save1", "overcastPeak2[2]", 0);
                        global.overcastPeak3TD[2] = ini_read_real("Save1", "overcastPeak3[2]", 0);
                        global.overcastPeak4TD[2] = ini_read_real("Save1", "overcastPeak4[2]", 0);
                        global.overcastPeak5TD[2] = ini_read_real("Save1", "overcastPeak5[2]", 0);
                        global.skullcoinBay1TD[2] = ini_read_real("Save1", "skullcoinBay1[2]", 0);
                        global.skullcoinBay2TD[2] = ini_read_real("Save1", "skullcoinBay2[2]", 0);
                        global.skullcoinBay3TD[2] = ini_read_real("Save1", "skullcoinBay3[2]", 0);
                        global.skullcoinBay4TD[2] = ini_read_real("Save1", "skullcoinBay4[2]", 0);
                        ini_close();
                        
                        audio_stop_all();
                        global.currSave = 1;
                        room_goto(global.loadedRoom);
                    }
                    else
                    {
                        audio_stop_all();
                        saveMPStatus = global.mpStatus;
                        script_execute(globalSettings);
                        global.mpStatus = saveMPStatus;
                        global.currSave = 1;            
                        room_goto(cutsceneGameStart);
                    }
                    break;
                case 1:
                    if (file_exists("save2.has"))
                    {
                        global.continued = true;
                        ini_open("save2.has");
                        global.loadedRoom = ini_read_real("Save2", "current room", 1);
                        global.playerSpawnLocation = ini_read_real("Save2", "current spawnLocation", 0);
                        global.pickedRed = ini_read_real("Save2", "redOrb", true);
                        global.pickedBlue = ini_read_real("Save2", "blueOrb", true);
                        global.placedRed = ini_read_real("Save2", "redOrbPlaced", true);
                        global.placedBlue = ini_read_real("Save2", "blueOrbPlaced", true);
                        global.placedRed2 = ini_read_real("Save2", "redOrbPlaced2", true);
                        global.placedBlue2 = ini_read_real("Save2", "blueOrbPlaced2", true);
                        global.mode = ini_read_real("Save2", "gamemode", 0);
                        global.deathCount = ini_read_real("Save2", "death count", 0);
                        global.healthVar = ini_read_real("Save2", "health", 2);
                        global.money = ini_read_real("Save2", "money", 0);
                        global.pickedUltraSouls = ini_read_real("Save2", "ultraSouls", 0);
                        global.pickedTooth = ini_read_real("Save2", "picked tooth", false);
                        global.pickedKey = ini_read_real("Save2", "picked key", true);
                        global.pickedGoldchain = ini_read_real("Save2", "picked goldchain", false);
                        global.ringVision = ini_read_real("Save2", "ring Vision", false);
                        global.ringWealth = ini_read_real("Save2", "ring Wealth", false);
                        global.ringPower = ini_read_real("Save2", "ring Power", false);
                        global.ringFriendship = ini_read_real("Save2", "ring Friendship", false);
                        global.ringInventory[0] = ini_read_real("Save2", "ring Inventory0", -1);
                        global.ringInventory[1] = ini_read_real("Save2", "ring Inventory1", -1);
                        global.opDoor = ini_read_real("Save2", "opDoor", true);
                        global.gvDoor = ini_read_real("Save2", "gvDoor", true);
                        global.scbDoor = ini_read_real("Save2", "scbDoor", true);
                        global.daughterHelped = ini_read_real("Save2", "daughterHelped", true);
                        global.map = ini_read_real("Save2", "map", 0);
                        global.level = ini_read_real("Save2", "levelNPC", 0);
                        global.dmgMult = ini_read_real("Save2", "dmgMult", 1);
                        global.spawnBoss = ini_read_real("Save2", "spawnBoss", true);
                        
                        //Ultra Souls
                        global.ultraSoul1 = ini_read_real("Save2", "ultraSoul1", 0);
                        global.ultraSoul2 = ini_read_real("Save2", "ultraSoul2", 0);
                        global.ultraSoul3 = ini_read_real("Save2", "ultraSoul3", 0);
                        global.ultraSoul4 = ini_read_real("Save2", "ultraSoul4", 0);
                        global.ultraSoul5 = ini_read_real("Save2", "ultraSoul5", 0);
                        global.ultraSoul6 = ini_read_real("Save2", "ultraSoul6", 0);
                        global.ultraSoul7 = ini_read_real("Save2", "ultraSoul7", 0);
                        
                        //Trapdoor0
                        global.gardenValleyTD[0] = ini_read_real("Save2", "gardenValley[0]", 0);
                        global.unknownForest1TD[0] = ini_read_real("Save2", "unknownForest1[0]", 0);
                        global.unknownForest2TD[0] = ini_read_real("Save2", "unknownForest2[0]", 0);
                        global.unknownForest3TD[0] = ini_read_real("Save2", "unknownForest3[0]", 0);
                        global.demonsKeep1TD[0] = ini_read_real("Save2", "demonsKeep1[0]", 0);
                        global.demonsKeep2TD[0] = ini_read_real("Save2", "demonsKeep2[0]", 0);
                        global.demonsKeep3TD[0] = ini_read_real("Save2", "demonsKeep3[0]", 0);
                        global.undergroundCity1TD[0] = ini_read_real("Save2", "undergroundCity1[0]", 0);
                        global.undergroundCity2TD[0] = ini_read_real("Save2", "undergroundCity2[0]", 0);
                        global.undergroundCity3TD[0] = ini_read_real("Save2", "undergroundCity3[0]", 0);
                        global.sentinelGraves1TD[0] = ini_read_real("Save2", "sentinelGraves1[0]", 0);
                        global.sentinelGraves2TD[0] = ini_read_real("Save2", "sentinelGraves2[0]", 0);
                        global.deepPrisonTD[0] = ini_read_real("Save2", "deepPrison[0]", 0);
                        global.overcastPeak1TD[0] = ini_read_real("Save2", "overcastPeak1[0]", 0);
                        global.overcastPeak2TD[0] = ini_read_real("Save2", "overcastPeak2[0]", 0);
                        global.overcastPeak3TD[0] = ini_read_real("Save2", "overcastPeak3[0]", 0);
                        global.overcastPeak4TD[0] = ini_read_real("Save2", "overcastPeak4[0]", 0);
                        global.overcastPeak5TD[0] = ini_read_real("Save2", "overcastPeak5[0]", 0);
                        global.skullcoinBay1TD[0] = ini_read_real("Save2", "skullcoinBay1[0]", 0);
                        global.skullcoinBay2TD[0] = ini_read_real("Save2", "skullcoinBay2[0]", 0);
                        global.skullcoinBay3TD[0] = ini_read_real("Save2", "skullcoinBay3[0]", 0);
                        global.skullcoinBay4TD[0] = ini_read_real("Save2", "skullcoinBay4[0]", 0);
                        //Trapdoor1
                        global.gardenValleyTD[1] = ini_read_real("Save2", "gardenValley[1]", 0);
                        global.unknownForest1TD[1] = ini_read_real("Save2", "unknownForest1[1]", 0);
                        global.unknownForest2TD[1] = ini_read_real("Save2", "unknownForest2[1]", 0);
                        global.unknownForest3TD[1] = ini_read_real("Save2", "unknownForest3[1]", 0);
                        global.demonsKeep1TD[1] = ini_read_real("Save2", "demonsKeep1[1]", 0);
                        global.demonsKeep2TD[1] = ini_read_real("Save2", "demonsKeep2[1]", 0);
                        global.demonsKeep3TD[1] = ini_read_real("Save2", "demonsKeep3[1]", 0);
                        global.undergroundCity1TD[1] = ini_read_real("Save2", "undergroundCity1[1]", 0);
                        global.undergroundCity2TD[1] = ini_read_real("Save2", "undergroundCity2[1]", 0);
                        global.undergroundCity3TD[1] = ini_read_real("Save2", "undergroundCity3[1]", 0);
                        global.sentinelGraves1TD[1] = ini_read_real("Save2", "sentinelGraves1[1]", 0);
                        global.sentinelGraves2TD[1] = ini_read_real("Save2", "sentinelGraves2[1]", 0);
                        global.deepPrisonTD[1] = ini_read_real("Save2", "deepPrison[1]", 0);
                        global.overcastPeak1TD[1] = ini_read_real("Save2", "overcastPeak1[1]", 0);
                        global.overcastPeak2TD[1] = ini_read_real("Save2", "overcastPeak2[1]", 0);
                        global.overcastPeak3TD[1] = ini_read_real("Save2", "overcastPeak3[1]", 0);
                        global.overcastPeak4TD[1] = ini_read_real("Save2", "overcastPeak4[1]", 0);
                        global.overcastPeak5TD[1] = ini_read_real("Save2", "overcastPeak5[1]", 0);
                        global.skullcoinBay1TD[1] = ini_read_real("Save2", "skullcoinBay1[1]", 0);
                        global.skullcoinBay2TD[1] = ini_read_real("Save2", "skullcoinBay2[1]", 0);
                        global.skullcoinBay3TD[1] = ini_read_real("Save2", "skullcoinBay3[1]", 0);
                        global.skullcoinBay4TD[1] = ini_read_real("Save2", "skullcoinBay4[1]", 0);
                        //Trapdoor2
                        global.gardenValleyTD[2] = ini_read_real("Save2", "gardenValley[2]", 0);
                        global.unknownForest1TD[2] = ini_read_real("Save2", "unknownForest1[2]", 0);
                        global.unknownForest2TD[2] = ini_read_real("Save2", "unknownForest2[2]", 0);
                        global.unknownForest3TD[2] = ini_read_real("Save2", "unknownForest3[2]", 0);
                        global.demonsKeep1TD[2] = ini_read_real("Save2", "demonsKeep1[2]", 0);
                        global.demonsKeep2TD[2] = ini_read_real("Save2", "demonsKeep2[2]", 0);
                        global.demonsKeep3TD[2] = ini_read_real("Save2", "demonsKeep3[2]", 0);
                        global.undergroundCity1TD[2] = ini_read_real("Save2", "undergroundCity1[2]", 0);
                        global.undergroundCity2TD[2] = ini_read_real("Save2", "undergroundCity2[2]", 0);
                        global.undergroundCity3TD[2] = ini_read_real("Save2", "undergroundCity3[2]", 0);
                        global.sentinelGraves1TD[2] = ini_read_real("Save2", "sentinelGraves1[2]", 0);
                        global.sentinelGraves2TD[2] = ini_read_real("Save2", "sentinelGraves2[2]", 0);
                        global.deepPrisonTD[2] = ini_read_real("Save2", "deepPrison[2]", 0);
                        global.overcastPeak1TD[2] = ini_read_real("Save2", "overcastPeak1[2]", 0);
                        global.overcastPeak2TD[2] = ini_read_real("Save2", "overcastPeak2[2]", 0);
                        global.overcastPeak3TD[2] = ini_read_real("Save2", "overcastPeak3[2]", 0);
                        global.overcastPeak4TD[2] = ini_read_real("Save2", "overcastPeak4[2]", 0);
                        global.overcastPeak5TD[2] = ini_read_real("Save2", "overcastPeak5[2]", 0);
                        global.skullcoinBay1TD[2] = ini_read_real("Save2", "skullcoinBay1[2]", 0);
                        global.skullcoinBay2TD[2] = ini_read_real("Save2", "skullcoinBay2[2]", 0);
                        global.skullcoinBay3TD[2] = ini_read_real("Save2", "skullcoinBay3[2]", 0);
                        global.skullcoinBay4TD[2] = ini_read_real("Save2", "skullcoinBay4[2]", 0);
                        ini_close();
                        
                        audio_stop_all();
                        global.currSave = 2;
                        room_goto(global.loadedRoom);
                    }
                    else
                    {
                        audio_stop_all();
                        saveMPStatus = global.mpStatus;
                        script_execute(globalSettings);
                        global.mpStatus = saveMPStatus;
                        global.currSave = 2;
                        room_goto(cutsceneGameStart);
                    }
                    break;
                case 2:
                    if (file_exists("save3.has"))
                    {
                        global.continued = true;
                        ini_open("save3.has");
                        global.loadedRoom = ini_read_real("Save3", "current room", 1);
                        global.playerSpawnLocation = ini_read_real("Save3", "current spawnLocation", 0);
                        global.pickedRed = ini_read_real("Save3", "redOrb", true);
                        global.pickedBlue = ini_read_real("Save3", "blueOrb", true);
                        global.placedRed = ini_read_real("Save3", "redOrbPlaced", true);
                        global.placedBlue = ini_read_real("Save3", "blueOrbPlaced", true);
                        global.placedRed2 = ini_read_real("Save3", "redOrbPlaced2", true);
                        global.placedBlue2 = ini_read_real("Save3", "blueOrbPlaced2", true);
                        global.mode = ini_read_real("Save3", "gamemode", 0);
                        global.deathCount = ini_read_real("Save3", "death count", 0);
                        global.healthVar = ini_read_real("Save3", "health", 2);
                        global.money = ini_read_real("Save3", "money", 0);
                        global.pickedUltraSouls = ini_read_real("Save3", "ultraSouls", 0);
                        global.pickedTooth = ini_read_real("Save3", "picked tooth", false);
                        global.pickedKey = ini_read_real("Save3", "picked key", true);
                        global.pickedGoldchain = ini_read_real("Save3", "picked goldchain", false);
                        global.ringVision = ini_read_real("Save3", "ring Vision", false);
                        global.ringWealth = ini_read_real("Save3", "ring Wealth", false);
                        global.ringPower = ini_read_real("Save3", "ring Power", false);
                        global.ringFriendship = ini_read_real("Save3", "ring Friendship", false);
                        global.ringInventory[0] = ini_read_real("Save3", "ring Inventory0", -1);
                        global.ringInventory[1] = ini_read_real("Save3", "ring Inventory1", -1);
                        global.opDoor = ini_read_real("Save3", "opDoor", true);
                        global.gvDoor = ini_read_real("Save3", "gvDoor", true);
                        global.scbDoor = ini_read_real("Save3", "scbDoor", true);
                        global.daughterHelped = ini_read_real("Save3", "daughterHelped", true);
                        global.map = ini_read_real("Save3", "map", 0);
                        global.level = ini_read_real("Save3", "levelNPC", 0);
                        global.dmgMult = ini_read_real("Save3", "dmgMult", 1);
                        global.spawnBoss = ini_read_real("Save3", "spawnBoss", true);
                        
                        //Ultra Souls
                        global.ultraSoul1 = ini_read_real("Save3", "ultraSoul1", 0);
                        global.ultraSoul2 = ini_read_real("Save3", "ultraSoul2", 0);
                        global.ultraSoul3 = ini_read_real("Save3", "ultraSoul3", 0);
                        global.ultraSoul4 = ini_read_real("Save3", "ultraSoul4", 0);
                        global.ultraSoul5 = ini_read_real("Save3", "ultraSoul5", 0);
                        global.ultraSoul6 = ini_read_real("Save3", "ultraSoul6", 0);
                        global.ultraSoul7 = ini_read_real("Save3", "ultraSoul7", 0);
                        
                        //Trapdoor0
                        global.gardenValleyTD[0] = ini_read_real("Save3", "gardenValley[0]", 0);
                        global.unknownForest1TD[0] = ini_read_real("Save3", "unknownForest1[0]", 0);
                        global.unknownForest2TD[0] = ini_read_real("Save3", "unknownForest2[0]", 0);
                        global.unknownForest3TD[0] = ini_read_real("Save3", "unknownForest3[0]", 0);
                        global.demonsKeep1TD[0] = ini_read_real("Save3", "demonsKeep1[0]", 0);
                        global.demonsKeep2TD[0] = ini_read_real("Save3", "demonsKeep2[0]", 0);
                        global.demonsKeep3TD[0] = ini_read_real("Save3", "demonsKeep3[0]", 0);
                        global.undergroundCity1TD[0] = ini_read_real("Save3", "undergroundCity1[0]", 0);
                        global.undergroundCity2TD[0] = ini_read_real("Save3", "undergroundCity2[0]", 0);
                        global.undergroundCity3TD[0] = ini_read_real("Save3", "undergroundCity3[0]", 0);
                        global.sentinelGraves1TD[0] = ini_read_real("Save3", "sentinelGraves1[0]", 0);
                        global.sentinelGraves2TD[0] = ini_read_real("Save3", "sentinelGraves2[0]", 0);
                        global.deepPrisonTD[0] = ini_read_real("Save3", "deepPrison[0]", 0);
                        global.overcastPeak1TD[0] = ini_read_real("Save3", "overcastPeak1[0]", 0);
                        global.overcastPeak2TD[0] = ini_read_real("Save3", "overcastPeak2[0]", 0);
                        global.overcastPeak3TD[0] = ini_read_real("Save3", "overcastPeak3[0]", 0);
                        global.overcastPeak4TD[0] = ini_read_real("Save3", "overcastPeak4[0]", 0);
                        global.overcastPeak5TD[0] = ini_read_real("Save3", "overcastPeak5[0]", 0);
                        global.skullcoinBay1TD[0] = ini_read_real("Save3", "skullcoinBay1[0]", 0);
                        global.skullcoinBay2TD[0] = ini_read_real("Save3", "skullcoinBay2[0]", 0);
                        global.skullcoinBay3TD[0] = ini_read_real("Save3", "skullcoinBay3[0]", 0);
                        global.skullcoinBay4TD[0] = ini_read_real("Save3", "skullcoinBay4[0]", 0);
                        //Trapdoor1
                        global.gardenValleyTD[1] = ini_read_real("Save3", "gardenValley[1]", 0);
                        global.unknownForest1TD[1] = ini_read_real("Save3", "unknownForest1[1]", 0);
                        global.unknownForest2TD[1] = ini_read_real("Save3", "unknownForest2[1]", 0);
                        global.unknownForest3TD[1] = ini_read_real("Save3", "unknownForest3[1]", 0);
                        global.demonsKeep1TD[1] = ini_read_real("Save3", "demonsKeep1[1]", 0);
                        global.demonsKeep2TD[1] = ini_read_real("Save3", "demonsKeep2[1]", 0);
                        global.demonsKeep3TD[1] = ini_read_real("Save3", "demonsKeep3[1]", 0);
                        global.undergroundCity1TD[1] = ini_read_real("Save3", "undergroundCity1[1]", 0);
                        global.undergroundCity2TD[1] = ini_read_real("Save3", "undergroundCity2[1]", 0);
                        global.undergroundCity3TD[1] = ini_read_real("Save3", "undergroundCity3[1]", 0);
                        global.sentinelGraves1TD[1] = ini_read_real("Save3", "sentinelGraves1[1]", 0);
                        global.sentinelGraves2TD[1] = ini_read_real("Save3", "sentinelGraves2[1]", 0);
                        global.deepPrisonTD[1] = ini_read_real("Save3", "deepPrison[1]", 0);
                        global.overcastPeak1TD[1] = ini_read_real("Save3", "overcastPeak1[1]", 0);
                        global.overcastPeak2TD[1] = ini_read_real("Save3", "overcastPeak2[1]", 0);
                        global.overcastPeak3TD[1] = ini_read_real("Save3", "overcastPeak3[1]", 0);
                        global.overcastPeak4TD[1] = ini_read_real("Save3", "overcastPeak4[1]", 0);
                        global.overcastPeak5TD[1] = ini_read_real("Save3", "overcastPeak5[1]", 0);
                        global.skullcoinBay1TD[1] = ini_read_real("Save3", "skullcoinBay1[1]", 0);
                        global.skullcoinBay2TD[1] = ini_read_real("Save3", "skullcoinBay2[1]", 0);
                        global.skullcoinBay3TD[1] = ini_read_real("Save3", "skullcoinBay3[1]", 0);
                        global.skullcoinBay4TD[1] = ini_read_real("Save3", "skullcoinBay4[1]", 0);
                        //Trapdoor2
                        global.gardenValleyTD[2] = ini_read_real("Save3", "gardenValley[2]", 0);
                        global.unknownForest1TD[2] = ini_read_real("Save3", "unknownForest1[2]", 0);
                        global.unknownForest2TD[2] = ini_read_real("Save3", "unknownForest2[2]", 0);
                        global.unknownForest3TD[2] = ini_read_real("Save3", "unknownForest3[2]", 0);
                        global.demonsKeep1TD[2] = ini_read_real("Save3", "demonsKeep1[2]", 0);
                        global.demonsKeep2TD[2] = ini_read_real("Save3", "demonsKeep2[2]", 0);
                        global.demonsKeep3TD[2] = ini_read_real("Save3", "demonsKeep3[2]", 0);
                        global.undergroundCity1TD[2] = ini_read_real("Save3", "undergroundCity1[2]", 0);
                        global.undergroundCity2TD[2] = ini_read_real("Save3", "undergroundCity2[2]", 0);
                        global.undergroundCity3TD[2] = ini_read_real("Save3", "undergroundCity3[2]", 0);
                        global.sentinelGraves1TD[2] = ini_read_real("Save3", "sentinelGraves1[2]", 0);
                        global.sentinelGraves2TD[2] = ini_read_real("Save3", "sentinelGraves2[2]", 0);
                        global.deepPrisonTD[2] = ini_read_real("Save3", "deepPrison[2]", 0);
                        global.overcastPeak1TD[2] = ini_read_real("Save3", "overcastPeak1[2]", 0);
                        global.overcastPeak2TD[2] = ini_read_real("Save3", "overcastPeak2[2]", 0);
                        global.overcastPeak3TD[2] = ini_read_real("Save3", "overcastPeak3[2]", 0);
                        global.overcastPeak4TD[2] = ini_read_real("Save3", "overcastPeak4[2]", 0);
                        global.overcastPeak5TD[2] = ini_read_real("Save3", "overcastPeak5[2]", 0);
                        global.skullcoinBay1TD[2] = ini_read_real("Save3", "skullcoinBay1[2]", 0);
                        global.skullcoinBay2TD[2] = ini_read_real("Save3", "skullcoinBay2[2]", 0);
                        global.skullcoinBay3TD[2] = ini_read_real("Save3", "skullcoinBay3[2]", 0);
                        global.skullcoinBay4TD[2] = ini_read_real("Save3", "skullcoinBay4[2]", 0);
                        ini_close();
                        
                        audio_stop_all();
                        global.currSave = 3;
                        room_goto(global.loadedRoom);
                    }
                    else
                    {
                        audio_stop_all();
                        saveMPStatus = global.mpStatus;
                        script_execute(globalSettings);
                        global.mpStatus = saveMPStatus;
                        global.currSave = 3;
                        room_goto(cutsceneGameStart);
                    }
                    break;
                case 3:
                    global.mpStatus = -1;
                    menuSite = 1;
                    break;
            }
            break;
        case 8:
            switch (selectedElement)
            {
                case 0:
                    audio_stop_all();
                    script_execute(globalSettings);
                    global.speedStatus = 1;
                    room_goto(gardenValley);
                    break;
                case 1:
                    menuSite = 1;
                    break;
            }
            break;
    }
    selectedElement = 0;
}

switch (menuSite)
{
    case 0:
        menuElements[0] = "Press Start";
        menuElements[1] = "";
        menuElements[2] = "";
        menuElements[3] = "";
        menuElements[4] = "";
        menuElements[5] = "";
        menuElements[6] = "";
        break;
    case 1:
        menuElements[0] = "Singleplayer";
        menuElements[1] = "Multiplayer [BETA]";
        menuElements[2] = "Speedrun Mode";
        menuElements[3] = "Settings";
        menuElements[4] = "Quit";
        menuElements[5] = "";
        menuElements[6] = "";
        break;
    case 2:
        menuElements[0] = "Video Settings";
        menuElements[1] = "Audio Settings";
        menuElements[2] = "Controls";
        menuElements[3] = "Back";
        menuElements[4] = "";
        menuElements[5] = "";
        menuElements[6] = "";
        break;
    case 3:
        menuElements[0] = "Toggle Fullscreen";
        if (global.brightnessCount == 0)
        {
            menuElements[1] = "Brightness Level: ____";
        }
        if (global.brightnessCount == 1)
        {
            menuElements[1] = "Brightness Level: X___";
        }
        if (global.brightnessCount == 2)
        {
            menuElements[1] = "Brightness Level: XX__";
        }
        if (global.brightnessCount == 3)
        {
            menuElements[1] = "Brightness Level: XXX_";
        }
        if (global.brightnessCount == 4)
        {
            menuElements[1] = "Brightness Level: XXXX";
        }
        menuElements[2] = "Back";
        menuElements[3] = "";
        menuElements[4] = "";
        menuElements[5] = "";
        menuElements[6] = "";
        break;
    case 4:
        if (global.musicCount == 0)
        {
            menuElements[0] = "Music Volume Level ____";
        }
        if (global.musicCount == 1)
        {
            menuElements[0] = "Music Volume Level X___";
        }
        if (global.musicCount == 2)
        {
            menuElements[0] = "Music Volume Level XX__";
        }
        if (global.musicCount == 3)
        {
            menuElements[0] = "Music Volume Level XXX_";
        }
        if (global.musicCount == 4)
        {
            menuElements[0] = "Music Volume Level XXXX";
        }
        menuElements[1] = "Back";
        menuElements[2] = "";
        menuElements[3] = "";
        menuElements[4] = "";
        menuElements[5] = "";
        menuElements[6] = "";
        break;
    case 5:
        menuElements[0] = "Move Left: ";
        menuElements[1] = "Move Right: ";
        menuElements[2] = "Jump: ";
        menuElements[3] = "Attack: ";
        menuElements[4] = "Throw: ";
        menuElements[5] = "Back";
        menuElements[6] = "";
        break;
    case 6:
        menuElements[0] = "Host Game";
        menuElements[1] = "Join Game";      
        menuElements[2] = "Back";
        menuElements[3] = "";
        menuElements[4] = "";
        menuElements[5] = "";
        menuElements[6] = "";
        break;
    case 7:
        menuElements[0] = "Select Save 1";
        menuElements[1] = "Select Save 2";      
        menuElements[2] = "Select Save 3";
        menuElements[3] = "Back";
        menuElements[4] = "";
        menuElements[5] = "";
        menuElements[6] = "";
        break;
    case 8:
        menuElements[0] = "Start Speedrun";
        menuElements[1] = "Back";
        menuElements[2] = "";
        menuElements[3] = "";
        menuElements[4] = "";
        menuElements[5] = "";
        menuElements[6] = "";
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Video Settings

key_up = keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord("W")) || gamepad_button_check_pressed(0, gp_padu);
key_down = keyboard_check_pressed(vk_down) || keyboard_check_pressed(ord("S")) || gamepad_button_check_pressed(0, gp_padd);
key_left = keyboard_check_pressed(vk_left) || keyboard_check_pressed(ord("A")) || gamepad_button_check_pressed(0, gp_padl);
key_right = keyboard_check_pressed(vk_right) || keyboard_check_pressed(ord("D")) || gamepad_button_check_pressed(0, gp_padr);
key_enter = keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(0, gp_face1);
key_back = keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace) || gamepad_button_check_pressed(0, gp_face2);

if (menuSite == 3)
{
    if (key_right &amp;&amp; global.brightnessCount &lt; 4)
    {
        global.brightnessCount += 1;
    }
    
    if (global.brightnessCount &gt; 4)
    {
        global.brightnessCount = 0;
    }
    
    if (key_left &amp;&amp; global.brightnessCount &gt; 0)
    {
        global.brightnessCount -= 1;
    }
    
    if (global.brightnessCount &lt; 0)
    {
        global.brightnessCount = 4;
    }
    
    if (global.brightnessCount == 0)
    {
        global.brightness = 1;
    }
    if (global.brightnessCount == 1)
    {
        global.brightness = 0.9;
    }
    if (global.brightnessCount == 2)
    {
        global.brightness = 0.8;
    }
    if (global.brightnessCount == 3)
    {
        global.brightness = 0.6;
    }
    if (global.brightnessCount == 4)
    {
        global.brightness = 0.45;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sound Settings

key_up = keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord("W")) || gamepad_button_check_pressed(0, gp_padu);
key_down = keyboard_check_pressed(vk_down) || keyboard_check_pressed(ord("S")) || gamepad_button_check_pressed(0, gp_padd);
key_left = keyboard_check_pressed(vk_left) || keyboard_check_pressed(ord("A")) || gamepad_button_check_pressed(0, gp_padl);
key_right = keyboard_check_pressed(vk_right) || keyboard_check_pressed(ord("D")) || gamepad_button_check_pressed(0, gp_padr);
key_enter = keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(0, gp_face1);
key_back = keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace) || gamepad_button_check_pressed(0, gp_face2);

if (menuSite == 4)
{
    if (key_right &amp;&amp; global.musicCount &lt; 4)
    {
        global.musicCount += 1;
    }
    
    if (global.musicCount &gt; 4)
    {
        global.musicCount = 0;
    }
    
    if (key_left &amp;&amp; global.musicCount &gt; 0)
    {
        global.musicCount -= 1;
    }
    
    if (global.musicCount &lt; 0)
    {
        global.musicCount = 4;
    }
    
    if (global.musicCount == 0)
    {
        global.musicVolume = 0;
    }
    if (global.musicCount == 1)
    {
        global.musicVolume = 0.15;
    }
    if (global.musicCount == 2)
    {
        global.musicVolume = 0.3;
    }
    if (global.musicCount == 3)
    {
        global.musicVolume = 0.45;
    }
    if (global.musicCount == 4)
    {
        global.musicVolume = 0.6;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Deletion

if (keyboard_check_pressed(ord("I")) || keyboard_check_pressed(vk_backspace) || gamepad_button_check_pressed(0, gp_face4))
{
    if (menuSite == 7)
    {
        if (selectedElement == 0)
        {
            if (file_exists("save1.has"))
            {
                file_delete("save1.has");
            }
        }
        if (selectedElement == 1)
        {
            if (file_exists("save2.has"))
            {
                file_delete("save2.has");
            }
        }
        if (selectedElement == 2)
        {
            if (file_exists("save3.has"))
            {
                file_delete("save3.has");
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Title
draw_set_color(c_white);
draw_set_font(global.newPixelMenuBig);
draw_text(72, 64, "How About Spikes");

//Menu Elements
draw_set_font(global.newPixelMenu);
for (i = 0; i &lt; array_length_1d(menuElements); i++)
{
    if (selectedElement == i)
    {
        draw_set_color(c_white);
        var txt = menuElements[i];
        var txt = string_insert("&gt; ", txt, 0);     
        draw_text(48, 512 + (64 * i), txt);       
    }
    else
    {
        draw_set_color(c_gray); 
        var txt = menuElements[i]; 
        draw_text(48, 512 + (64 * i), txt);
    }
}

draw_set_font(version_fnt);
draw_set_color(c_white);
draw_text(1400, 1040, "How About Spikes | v.1.1 Speedrun Update");



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save File Menu

draw_set_font(global.newPixelMenu);
draw_set_color(c_white);
if (menuSite == 7)
{
    //Save 1
    if (file_exists("save1.has"))
    {
        //READ SAVE
        ini_open("save1.has");
        global.healthVar = ini_read_real("Save1", "health", 2);
        global.money = ini_read_real("Save1", "money", 0);
        global.deathCount = ini_read_real("Save1", "death count", 0);  
        global.mode = ini_read_real("Save1", "gamemode", 0); 
        ini_close();   
          
        draw_text_ext(550, 230, "Hearts:" + string(global.healthVar) + " " + "Souls:" + string(global.money) + " " + "Deaths:" + string(global.deathCount) + " " + "Mode:" + string(global.mode), 48, 95);
    }
    else
    {
        draw_text_ext(550, 230, "NEW FILE", 48, 140);
    }
    
    //Save 2
    if (file_exists("save2.has"))
    {
        //READ SAVE
        ini_open("save2.has");
        global.healthVar = ini_read_real("Save2", "health", 2);
        global.money = ini_read_real("Save2", "money", 0);
        global.deathCount = ini_read_real("Save2", "death count", 0);  
        global.mode = ini_read_real("Save2", "gamemode", 0); 
        ini_close(); 
            
        draw_text_ext(1040, 230, "Hearts:" + string(global.healthVar) + " " + "Souls:" + string(global.money) + " " + "Deaths:" + string(global.deathCount) + " " + "Mode:" + string(global.mode), 48, 95);
    }
    else
    {
        draw_text_ext(1040, 230, "NEW FILE", 48, 140);
    }
    
    //Save 3
    if (file_exists("save3.has"))
    {
        //READ SAVE
        ini_open("save3.has");
        global.healthVar = ini_read_real("Save3", "health", 2);
        global.money = ini_read_real("Save3", "money", 0);
        global.deathCount = ini_read_real("Save3", "death count", 0);  
        global.mode = ini_read_real("Save3", "gamemode", 0); 
        ini_close();   
          
        draw_text_ext(1520, 230, "Hearts:" + string(global.healthVar) + " " + "Souls:" + string(global.money) + " " + "Deaths:" + string(global.deathCount) + " " + "Mode:" + string(global.mode), 48, 95);
    }
    else
    {
        draw_text_ext(1520, 230, "NEW FILE", 48, 140);
    }
    draw_text(500, 980, "Press I / Y to delete a save file");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Speedrun Leaderboards

if (menuSite == 8)
{
    draw_text(1000, 120, "Leaderboard");
    if (steam_initialised())
    {
        for (i = 0; i &lt; array_length_1d(global.steam_rank); i++)
        {
            if (i &lt; 10)
            {
                if (string_length(global.steam_name[i]) &gt; 8)
                {
                    var cutName = string_delete(global.steam_name[i], 8, string_length(global.steam_name[i]) - 8);
                    draw_text(600, 216 + (64 * i), "[" + string(global.steam_rank[i]) + "] " + string(cutName) + ": " + string(global.steam_score[i]));
                }
                else
                {
                    draw_text(600, 216 + (64 * i), "[" + string(global.steam_rank[i]) + "] " + string(global.steam_name[i]) + ": " + string(global.steam_score[i]));
                }
            }
            else
            {
                exit;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
