<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>playerIdle_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-13</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vars

movSpeed = 2.65;
global.jumpStrength = 7.04;
global.mpMove = 0;
numberJumps = 2;
global.gravityStrength = 0.46;
global.ladderSpeed = 3.25;
healthServer = global.healthVar;
//health = global.healthPause;
attackCooldown = 7;
pauseMenu = false;

horSpeed = 0;
verSpeed = 0;
movement = true;
cooldown = false;
dead = false;
deathCountVar = false;
textTimer = 100;
grounded = false;
landSound = false;
noDamage = false;
nearEnemy = false;
lastDir = 0;
landing = false;
onLadder = false;
invTimer = 90;
throw = true;
animPause = false;
fullJump = false;
dash = true;
dashTimer = 7;
savePosX = 0;
savePosY = 0;
spawnPart = false;
serverSteamName = noone;

global.hit = false;
global.state = 0;
global.damage = 20;
global.damage = global.damage * global.dmgMult;
global.holding = noone;
numberJumpsSave = numberJumps;
numberJumps = 0;
global.checkpointServerX = 0;
global.checkpointServerY = 0;
global.checkpointRoomServer = 0;
global.restart = false;

//Multiplayer Help Vars
mpkeyThrow = false;
mpkeyAttack = false;
mpkeyEnter = false;
mpkeyPause = false;
localScythe = noone;

//Achievement
if (global.healthVar == 6)
{
    if (!steam_get_achievement("FULL_HEALTH"))
    {
        steam_set_achievement("FULL_HEALTH");
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ring System

if (global.ringVision)
{
    if (global.ringInventory[0] == -1)
    {
        global.ringInventory[0] = 0;
    }
    if (global.ringInventory[1] == -1)
    {
        if (global.ringInventory[0] != 0)
        {
            global.ringInventory[1] = 0;
        }
    }
    if (global.ringInventory[2] == -1)
    {
        if (global.ringInventory[0] != 0)
        {
            if (global.ringInventory[1] != 0)
            {
                global.ringInventory[2] = 0;
            }
        }
    }
    if (global.ringInventory[3] == -1)
    {
        if (global.ringInventory[0] != 0)
        {
            if (global.ringInventory[1] != 0)
            {
                if (global.ringInventory[2] != 0)
                {
                    global.ringInventory[3] = 0;
                }
            }
        }
    }
    
    with (darkBlockFake_obj)
    {
        image_index = 1;
    }
    /*
    //Exit if all slots are full
    if (global.ringInventory[0] != -1 &amp;&amp; global.ringInventory[1] != -1)
    {
        if (global.ringInventory[0] != 0 || global.ringInventory[0] != 0)
        {
            global.ringVision = false;
        }
    }
    */
}

if (global.ringWealth)
{
    if (global.ringInventory[0] == -1)
    {
        global.ringInventory[0] = 1;
    }
    if (global.ringInventory[1] == -1)
    {
        if (global.ringInventory[0] != 1)
        {
            global.ringInventory[1] = 1;
        }
    }
    if (global.ringInventory[2] == -1)
    {
        if (global.ringInventory[0] != 1)
        {
            if (global.ringInventory[1] != 1)
            {
                global.ringInventory[2] = 1;
            }
        }
    }
    if (global.ringInventory[3] == -1)
    {
        if (global.ringInventory[0] != 1)
        {
            if (global.ringInventory[1] != 1)
            {
                if (global.ringInventory[2] != 1)
                {
                    global.ringInventory[3] = 1;
                }
            }
        }
    }
    /*
    //Exit if all slots are full
    if (global.ringInventory[0] != -1 &amp;&amp; global.ringInventory[1] != -1)
    {
        if (global.ringInventory[0] != 1 || global.ringInventory[0] != 1)
        {
            global.ringWealth = false;
        }
    }
    */
}

if (global.ringPower)
{
    if (global.ringInventory[0] == -1)
    {
        global.ringInventory[0] = 2;
    }
    if (global.ringInventory[1] == -1)
    {
        if (global.ringInventory[0] != 2)
        {
            global.ringInventory[1] = 2;
        }
    }
    if (global.ringInventory[2] == -1)
    {
        if (global.ringInventory[0] != 2)
        {
            if (global.ringInventory[1] != 2)
            {
                global.ringInventory[2] = 2;
            }
        }
    }
    if (global.ringInventory[3] == -1)
    {
        if (global.ringInventory[0] != 2)
        {
            if (global.ringInventory[1] != 2)
            {
                if (global.ringInventory[2] != 2)
                {
                    global.ringInventory[3] = 2;
                }
            }
        }
    }
    
    global.jumpStrength = global.jumpStrength + ((global.jumpStrength / 100) * 10);
    /*
    //Exit if all slots are full
    if (global.ringInventory[0] != -1 &amp;&amp; global.ringInventory[1] != -1)
    {
        if (global.ringInventory[0] != 2 || global.ringInventory[0] != 2)
        {
            global.ringPower = false;
        }
    }
    */
}

if (global.ringFriendship)
{
    if (global.ringInventory[0] == -1)
    {
        global.ringInventory[0] = 3;
    }
    if (global.ringInventory[1] == -1)
    {
        if (global.ringInventory[0] != 3)
        {
            global.ringInventory[1] = 3;
        }
    }
    if (global.ringInventory[2] == -1)
    {
        if (global.ringInventory[0] != 3)
        {
            if (global.ringInventory[1] != 3)
            {
                global.ringInventory[2] = 3;
            }
        }
    }
    if (global.ringInventory[3] == -1)
    {
        if (global.ringInventory[0] != 3)
        {
            if (global.ringInventory[1] != 3)
            {
                if (global.ringInventory[2] != 3)
                {
                    global.ringInventory[3] = 3;
                }
            }
        }
    }
    
    
    /*
    //Exit if all slots are full
    if (global.ringInventory[0] != -1 &amp;&amp; global.ringInventory[1] != -1)
    {
        if (global.ringInventory[0] != 2 || global.ringInventory[0] != 2)
        {
            global.ringPower = false;
        }
    }
    */
}

//Achievement
if (global.ringVision &amp;&amp; global.ringWealth &amp;&amp; global.ringPower &amp;&amp; global.ringFriendship)
{
    if (!steam_get_achievement("TOO_MANY_RINGS"))
    {
        steam_set_achievement("TOO_MANY_RINGS");
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface = surface_create(room_width, room_height);
surfaceScale = 1/8;
amount = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Game
/*
playerInst = player_obj;

if (global.continued == true)
{
    if (file_exists("save1.has"))
    {
        ini_open("save1.has");  

        with (playerInst)
        {
            instance_destroy();
        }
        room_goto(global.loadedRoom);
        global.transition = false;
        global.playerSpawnLocation = 0;
        ini_close();
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HAS Master Achievement
if (steam_get_achievement("KILL_FIRST_SLIME") &amp;&amp; steam_get_achievement("WARP_ZONE_EXPLORER") &amp;&amp; steam_get_achievement("BIG_BAT") &amp;&amp; steam_get_achievement("OVERCAST_PEAK") &amp;&amp; steam_get_achievement("THE_END") &amp;&amp; steam_get_achievement("ULTRA_SOULS_COLLECTOR") &amp;&amp; steam_get_achievement("TOO_MANY_RINGS") &amp;&amp; steam_get_achievement("FULL_HEALTH") &amp;&amp; steam_get_achievement("ZERO_DEATHS"))
{
    if (!steam_get_achievement("HAS_MASTER"))
    {
        steam_set_achievement("HAS_MASTER");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cooldown = false;
animPause = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>landing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//gamepad_set_vibration(0, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement etc.

//###Movement###
if (movement == true)
{
    x = x + horSpeed;
    y = y + verSpeed;
}

//###Multiplayer Sync
if (global.mpStatus == 0)
{
    x = global.playerClientx;
    y = global.playerClienty;
}
if (global.mpStatus == 1)
{
    x = global.playerClientBackx;
    y = global.playerClientBacky;
}

key_left = keyboard_check(ord('A')) || gamepad_axis_value(0, gp_axislh) &lt; 0;
key_right = keyboard_check(ord('D')) || gamepad_axis_value(0, gp_axislh) &gt; 0;
key_jump = keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(0, gp_face1);
key_jump_hold = keyboard_check(vk_space) || gamepad_button_check(0, gp_face1);
key_jump_release = keyboard_check_released(vk_space) || gamepad_button_check_released(0, gp_face1);
key_attack = keyboard_check_pressed(ord('K')) || gamepad_button_check_pressed(0, gp_shoulderr);
key_throw = keyboard_check(ord('J')) || gamepad_button_check(0, gp_shoulderl);
key_restart = keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0, gp_face1);
key_pause = keyboard_check_pressed(vk_escape) || gamepad_button_check_pressed(0, gp_start);
gamepad_set_axis_deadzone(0, 0.55);
var move = key_right - key_left;
horSpeed = move * movSpeed;

if (mpkeyThrow &amp;&amp; verSpeed &gt; 0 &amp;&amp; dash == false)
{
    dash = true;
}
if (dash == true)
{
    movSpeed = 5.95;
    if (!instance_exists(dashEffect_obj))
    {
        instance_create(x, y, dashEffect_obj);
    }
    dashTimer = dashTimer - 1;
}
if (dashTimer &lt;= 0 || grounded == true || onLadder == true)
{
    dash = false;
    movSpeed = 2.65;
    dashTimer = 7;
}

//###OutsideSolid###
if (place_free(x, y))
{
    savePosX = x;
    savePosY = y;
}
else
{
    x = savePosX;
    y = savePosY;
    verSpeed = 0;
}

//###Scythe Throw###
if (mpkeyThrow)
{
    if (global.mpMove &gt; 0)
    {
        if (!throw)
        {
            localScythe = instance_create(x + 16, y, scytheServer_obj);
            if (!audio_is_playing(attack_snd))
            {
                audio_play_sound(attack_snd, 1, false);
            }
            throw = true;
            with (scytheServer_obj)
            {
                hspeed = 6.2;
            }
        }
    }
    if (global.mpMove &lt; 0)
    {
        if (!throw)
        {
            localScythe = instance_create(x - 16, y, scytheServer_obj);
            if (!audio_is_playing(attack_snd))
            {
                audio_play_sound(attack_snd, 1, false);
            }
            throw = true;
            with (scytheServer_obj)
            {
                hspeed = -6.2;
            }
        }
    }
    if (global.mpMove == 0)
    {
        if (lastDir == 0)
        {
            if (!throw)
            {
                localScythe = instance_create(x - 16, y, scytheServer_obj);
                if (!audio_is_playing(attack_snd))
                {
                    audio_play_sound(attack_snd, 1, false);
                }
                throw = true;
                with (scytheServer_obj)
                {
                    hspeed = -6.2;
                }
            }
        }
        if (lastDir == 1)
        {
            if (!throw)
            {
                localScythe = instance_create(x + 16, y, scytheServer_obj);
                if (!audio_is_playing(attack_snd))
                {
                    audio_play_sound(attack_snd, 1, false);
                }
                throw = true;
                with (scytheServer_obj)
                {
                    hspeed = 6.2;
                }
            }
        }
    }
}
else
{
    if (instance_exists(localScythe))
    {
        with (localScythe)
        {
            instance_destroy();
        }
    }
    if (grounded == true)
    {
        throw = false;
    }
}

//###Animation###
if (movement == true)
{
    if (global.mpMove != 0 &amp;&amp; animPause == false)
    {
        image_speed = 0.15;
        sprite_index = playerWalk_spr;
    }    
    if (global.mpMove == 0 &amp;&amp; animPause == false)
    {
        image_speed = 0.145;
        sprite_index = playerIdle_spr;
    }
    
    if (global.mpMove &lt; 0)
    {
        lastDir = 0;
    }
    if (global.mpMove &gt; 0)
    {
        lastDir = 1;
    }
    
    if (vspeed &gt; 0 &amp;&amp; animPause == false)
    {
        image_speed = 0.1;
        sprite_index = playerFalling_spr;
    }
    
    if (landing == true &amp;&amp; animPause == false)
    {
        image_speed = 0.1;
        sprite_index = playerLanding_spr;
    }
    
    if (numberJumps == 0 &amp;&amp; key_jump_hold &amp;&amp; global.ringPower &amp;&amp; animPause == false)
    {
        image_speed = 0.3;
        sprite_index = playerSpin_spr;
    }
    
    if (onLadder &amp;&amp; vspeed != 0 &amp;&amp; animPause == false)
    {
        image_speed = 0.1;
        sprite_index = playerClimb_spr;
    }

    if (noDamage == true)
    {
        sprite_index = playerInvincible_spr;
        if (invTimer &gt;= 30)
        {
            image_speed = 0.5;
        }
        else
        {
            image_speed = 0.2;
        }
    }
} 
   
//###Gravity###
if (movement == true)
{
    if (verSpeed &lt; 14)
    {
        if (onLadder == false)
        {
            verSpeed = verSpeed + global.gravityStrength;
        }
        else
        {
            if (place_meeting(x, y, ladder_obj))
            {
                verSpeed = 2.75;
            }
            else
            {
                verSpeed = 0;
            }
        }
    }

    if (!place_free(x, y + 1) &amp;&amp; (key_jump)) || (key_jump) &amp;&amp; (numberJumps &gt; 0)
    {
        verSpeed = -global.jumpStrength;
        numberJumps = numberJumps - 1;
    }
    
    if (key_jump_release &amp;&amp; fullJump == false)
    {
        if (verSpeed &lt; 0)
        {
            verSpeed = verSpeed / 2;
        }
    }
}
        
//###Combat###
if (mpkeyAttack &amp;&amp; movement == true &amp;&amp; !throw)
{
    if (!audio_is_playing(attack_snd))
    {
        audio_play_sound(attack_snd, 1, false);
    }
    animPause = true;
    alarm[2] = attackCooldown;
    image_speed = 0.1;
    sprite_index = playerAttack_spr;
    if (image_index == 1)
    {
        image_speed = 0;
        image_index = 1;
    }
    if (cooldown == false)
    {
        if (global.mpMove &gt; 0)
        {
            instance_create(x + 16, y, hitbox_obj);
            cooldown = true
        }
        if (global.mpMove &lt; 0)
        {
            instance_create(x - 16, y, hitbox_obj);
            cooldown = true
        }
        if (global.mpMove == 0)
        {
            if (lastDir == 0)
            {
                instance_create(x - 16, y, hitbox_obj);
                cooldown = true
            }
            if (lastDir == 1)
            {
                instance_create(x + 16, y, hitbox_obj);
                cooldown = true
            }
        }
    }
}

if ((grounded == false) &amp;&amp; (distance_to_object(enemy_obj) &lt; 128))
{
    nearEnemy = true;
    if (key_attack)
    {
        //global.state = 1;
    }
}
else
{
    nearEnemy = false;
}

switch (global.state)
{
case 1:
    targetInst = instance_nearest(x, y, enemy_obj);
    targetX = targetInst.x;
    targetY = targetInst.y;
    global.state = 2;
    break;
    
case 2:
    if (distance_to_point(targetX, targetY) &lt; 32)
    {
        global.state = 3;
    }
    else
    {
        move_towards_point(targetX, targetY, 7.4);
        if (!place_free(x + 64, y + 64) || !place_free(x -64, y-64))
        {
            global.state = 3;
        }
        instance_create(x, y, hitbox_obj);
    }
    break;

case 3:
    speed = 0;
    verSpeed = 0;
    horSpeed = 0;
    global.state = 4;
    break;
    
case 4:
    if (numberJumps &lt; 1)
    {
        numberJumps = numberJumps + 1;
    }
    verSpeed = -4;
    global.state = 0;
    break;
}

//###Collision Checking###
grounded = false;

if (landSound == true)
{
    if (!audio_is_playing(land_snd))
    {
        audio_play_sound(land_snd, 1, false);
        landSound = false;
    }
}

if (!place_free(x + horSpeed, y))
{
    while (place_free(x + sign(horSpeed), y))
    {
        x = x + sign(horSpeed);
    }
    horSpeed = 0;
    fullJump = false;
    //grounded = true;
} 
if (!place_free(x, y + verSpeed))
{
    while (place_free(x, y + sign(verSpeed)))
    {
        y = y + sign(verSpeed);
        landSound = true;
    }
    grounded = true;
    fullJump = false;
    if (verSpeed &gt;= 13)
    {
        //gamepad_set_vibration(0, 0.4, 0.4);
        alarm[0] = 10;
    }
    if (verSpeed &gt;= 2)
    {
        alarm[1] = 8;
    }
    verSpeed = 0;
    if (!place_free(x, y + 1))
    {
        numberJumps = numberJumpsSave;
    }
    /*
    if (spawnPart == false)
    {
        repeat (5)
        {
            with (instance_create(x, bbox_bottom, dust_obj))
            {
                vspeed = 0;
            }
        }
        spawnPart = true;
    }
    */
}
/*
else
{
    spawnPart = false;
}
*/

//###Death###
if (healthServer == 0)
{
    deathCountVar = true;
}
if (healthServer &lt; 0)
{
    horSpeed = 0;
    verSpeed = 0;
    dead = true;
    if (key_restart)
    {
        if (!instance_exists(playerDeath_obj))
        {
            instance_create(x, y, playerDeath_obj);
        }
        if (global.checkpointServerX == 0)
            {
                x = spawn_obj.x;
                y = spawn_obj.y - 8;
            }
            else
            {
                x = global.checkpointServerX;
                y = global.checkpointServerY;
                verSpeed = 0;
                horSpeed = 0;
            }
            healthServer = 2;
            dead = false;
    }
}

if (deathCountVar == true)
{
    global.deathCount = global.deathCount + 1;
    deathCountVar = false;
    healthServer = healthServer - 1;
}

//###Pause Menu###
/*
if (key_pause)
{
    if (pauseMenu == false)
    {
        pauseMenu = true;
    }
    else
    {
        pauseMenu = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision

//###Scythe Collision###
if (place_meeting(x, y, scytheServer_obj) &amp;&amp; global.throwingServer == false)
{   
    //###Collision Checking###
    if (!place_free(x + horSpeed, y))
    {
        while (place_free(x + sign(horSpeed), y))
        {
            x = x + sign(horSpeed);
        }
        horSpeed = 0;
    }
    else
    {
        verSpeed = -9;
    }
    if (!place_free(x, y + verSpeed))
    {
        while (place_free(x, y + sign(verSpeed)))
        {
            y = y + sign(verSpeed);
        }
        verSpeed = 0;
    }
    else
    {
        verSpeed = -9;
    }
    fullJump = true;
    numberJumps = numberJumps - 1;

    with (scytheServer_obj)
    {
        instance_destroy();
    }
}

//###Scythe Collision###
if (place_meeting(x, y, scythePlayer_obj) &amp;&amp; global.throwing == false)
{   
    //###Collision Checking###
    if (!place_free(x + horSpeed, y))
    {
        while (place_free(x + sign(horSpeed), y))
        {
            x = x + sign(horSpeed);
        }
        horSpeed = 0;
    }
    else
    {
        verSpeed = -9;
    }
    if (!place_free(x, y + verSpeed))
    {
        while (place_free(x, y + sign(verSpeed)))
        {
            y = y + sign(verSpeed);
        }
        verSpeed = 0;
    }
    else
    {
        verSpeed = -9;
    }
    fullJump = true;
    numberJumps = numberJumps - 1;

    with (scythePlayer_obj)
    {
        instance_destroy();
    }
}

//###Checkpoint Collision###
//global.checkpointX = global.checkpointSaveX;
//global.checkpointY = global.checkpointSaveY;

if (place_meeting(x, y, checkpoint_obj) || (place_meeting(x, y, checkpointMystery_obj)))
{
    healthServer = global.healthVar;
    global.checkpointServerX = other.x;
    global.checkpointServerY = other.y;
    global.checkpointServerRoom = room;
    instance_activate_object(glassBlockBroken_obj);
    instance_activate_object(enemyNormal_obj);
    instance_activate_object(slimeGreen_obj);
    instance_activate_object(enemyNormal2_obj);
    instance_activate_object(enemySkeletonRed_obj);
    instance_activate_object(enemyMystery_obj);
    instance_activate_object(enemyFlyingCloud_obj);
    instance_activate_object(enemyBat_obj);
    instance_activate_object(scytheReload_obj);
    instance_activate_object(boxWood_obj);
    instance_activate_object(grassBlock2Boss_obj);
    instance_activate_object(pirate_obj);
    instance_activate_object(explosiveBlock_obj);
    with (explosiveBlock_obj)
    {
        exploding = false;
        explodeTime = 150;
    }
    other.image_index = 1;
    noDamage = false;
    if (global.restart == false)
    {
        global.restart = true;
    }
}
//###Damage Collision###
if (place_meeting(x, y, lava_obj) || place_meeting(x, y, spikeRed_obj))
{
    if (healthServer &gt; 0)
    {
        healthServer = healthServer - 1;
    }
    alarm[0] = 10;
}

/*    
if (global.hit == true)
{
    gamepad_set_vibration(0, 0.3, 0.3);
    if (verSpeed &gt; 0)
    {
        verSpeed = -7;
    }
    if (verSpeed &lt; 0)
    {
        verSpeed = 7;
    }

    //###Collision Checking###
    if (!place_free(x + horSpeed, y))
    {
        while (place_free(x + sign(horSpeed), y))
        {
            x = x + sign(horSpeed);
        }
        horSpeed = 0;
    }
    else
    {
        verSpeed = -global.ladderSpeed;
    }
    if (!place_free(x, y + verSpeed))
    {
        while (place_free(x, y + sign(verSpeed)))
        {
            y = y + sign(verSpeed);
        }
        verSpeed = 0;
    }
    else
    {
        verSpeed = -global.ladderSpeed;
        global.numberJumps = global.numberJumpsSave;
    }

    //horSpeed = 5 * sign(horSpeed);
    if (noDamage == false)
    {
        health = health - 1;
    }
    alarm[0] = 10;
    noDamage = true;
    global.hit = false;
}

if (noDamage == true)
{
    invTimer = invTimer - 1;
}

if (invTimer &lt;= 0)
{
    noDamage = false;
    gamepad_set_vibration(0, 0, 0);
    invTimer = 90;
}

//###Ladder Collision###
key_jump = keyboard_check(vk_space) || gamepad_button_check(0, gp_face1);
if (place_meeting(x, y, ladder_obj))
{
    global.numberJumps = global.numberJumpsSave;
    if (key_jump)
    {
        //###Collision Checking###
        if (!place_free(x + horSpeed, y))
        {
            while (place_free(x + sign(horSpeed), y))
            {
                x = x + sign(horSpeed);
            }
            horSpeed = 0;
        }
        else
        {
            verSpeed = -global.ladderSpeed;
        }
        if (!place_free(x, y + verSpeed))
        {
            while (place_free(x, y + sign(verSpeed)))
            {
                y = y + sign(verSpeed);
            }
            verSpeed = 0;
        }
        else
        {
            verSpeed = -global.ladderSpeed;
        }
    }
    else
    {
        onLadder = true;
    }
}
else
{
    onLadder = false;
}   
//###Lever Collision###

if (place_meeting(x, y, lever_obj))
{
    global.hitLever = true;
}
if (place_meeting(x, y, leverBlue_obj))
{
    global.hitLeverBlue = true;
}
if (place_meeting(x, y, leverRed_obj))
{
    global.hitLeverRed = true;
}

//###Key Collision###
if (place_meeting(x, y, key_obj))
{
    global.holding = other.id;
}
//###Water Collision###
if (place_meeting(x, y, water_obj))
{
    horSpeed = horSpeed / 1.75;
    verSpeed = verSpeed / 1.02;
}
//###Quicksand Collision###
if (place_meeting(x, y, quicksandBlock_obj))
{
    horSpeed = horSpeed / 1.75;
    verSpeed = verSpeed / 1.15;
}
//###FlyingCloud Collision###
if (place_meeting(x, y, flyingCloud_obj))
{
    horSpeed = horSpeed / 2.75;
    verSpeed = verSpeed / 1.2;
}

//###GlassBlockBroken Collision###
if (place_meeting(x, y, glassBlockBroken_obj))
{
    horSpeed = 5 * sign(horSpeed);
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
///Debug
//###Easy Mode###
if (keyboard_check_pressed(ord('0')))
{
    if (global.mode == 0)
    {
        global.mode = 1;
    }
    else
    {
        global.mode = 0;
    }
}

//###Debug Stuff###
if (keyboard_check_pressed(ord('1')))
{
    global.ringFriendship = true;
}

if (keyboard_check_pressed(ord('2')))
{
    global.ringWealth = true;
}
if (keyboard_check_pressed(ord('3')))
{
    global.ringPower = true;
}
if (keyboard_check_pressed(ord('4')))
{
    global.ringVision = true;
}
if (keyboard_check_pressed(ord('5')) &amp;&amp; room != unknownForestBoss)
{
    global.playerSpawnLocation = 0;
    room_goto(unknownForestBoss);
}
if (keyboard_check_pressed(ord('6')) &amp;&amp; room != overcastPeakBoss)
{
    global.playerSpawnLocation = 0;
    room_goto(overcastPeakBoss);
}
if (keyboard_check_pressed(ord('7')) &amp;&amp; room != skullcoinBayBoss)
{
    global.playerSpawnLocation = 0;
    room_goto(skullcoinBayBoss);
}
if (keyboard_check_pressed(ord('8')) &amp;&amp; room != overcastPeak4)
{
    global.playerSpawnLocation = 0;
    room_goto(overcastPeak4);
}

if (keyboard_check_pressed(ord('9')) &amp;&amp; room != skullcoinBay3)
{
    global.playerSpawnLocation = 0;
    room_goto(skullcoinBay3);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Multiplayer
draw_self();
image_blend = c_blue;

if (mpkeyPause)
{
    draw_sprite(sleepIcon_spr, 0, x, y - 32)
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
